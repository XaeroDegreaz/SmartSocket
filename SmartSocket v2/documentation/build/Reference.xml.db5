<?xml version="1.0" encoding="utf-8"?><book xml:lang="en" xml:base="file:///c:/Users/XaeroDegreaz/Desktop/Code%20Projects/_Git/SmartSocketV2/javadoc/build/">
  <title>SmartSocket API</title>
  <bookinfo>
    <author>
      <personname>
        <firstname>Jerome</firstname>
        <surname>Doby</surname>
      </personname>
      <affiliation>
        <address>
          <email>jerome@smartsocket.net</email>
        </address>
      </affiliation>
    </author>
    <copyright>
      <year>2011</year>
      <holder>Jerome Doby</holder>
    </copyright>
    <releaseinfo>2.0</releaseinfo>
    <date>March 15, 2011</date>
    <abstract>
      <para/>
    </abstract>
  </bookinfo>
  <chapter xreflabel="net.smartsocket" id="package-net.smartsocket">
    <title>Package net.Â­smartsocket</title>
    <sect1 xreflabel="net.smartsocket.Logger" id="class-net.smartsocket.Logger">
      <title>Class Logger</title>
      <indexterm><primary>Logger</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>Logger</secondary></indexterm>
      <para>The Logger class handles all of the displaying of log text to the console gui in the correct tabs. The class works on a level based system, in which only the levels which meet or exceed the minimum log level are output to the gui console.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>Logger</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>int</type>
            <varname>CRITICAL</varname>
            <initializer>2</initializer>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>int</type>
            <varname>DEBUG</varname>
            <initializer>0</initializer>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>int</type>
            <varname>INFO</varname>
            <initializer>1</initializer>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>Logger</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>int</type>
            <methodname>getLogLevel</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>log</methodname>
            <methodparam><type>Object</type><parameter>message</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>log</methodname>
            <methodparam><type>Object</type><parameter>message</parameter></methodparam>
            <methodparam><type>int</type><parameter>logLevel</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>setLogLevel</methodname>
            <methodparam><type>int</type><parameter>logLevel</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/Logger/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/Logger/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="CRITICAL" id="field-net.smartsocket.Logger.CRITICAL">
        <title>CRITICAL</title>
        <indexterm><primary>CRITICAL</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>CRITICAL</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>int</type>
          <varname>CRITICAL</varname>
          <initializer>2</initializer>
        </fieldsynopsis>
        <para>The highest level of logging so far.</para>
      </sect2>
      <sect2 xreflabel="DEBUG" id="field-net.smartsocket.Logger.DEBUG">
        <title>DEBUG</title>
        <indexterm><primary>DEBUG</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>DEBUG</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>int</type>
          <varname>DEBUG</varname>
          <initializer>0</initializer>
        </fieldsynopsis>
        <para>This is the default level used for any log call that doesn't have an explicit log level defined</para>
      </sect2>
      <sect2 xreflabel="INFO" id="field-net.smartsocket.Logger.INFO">
        <title>INFO</title>
        <indexterm><primary>INFO</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>INFO</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>int</type>
          <varname>INFO</varname>
          <initializer>1</initializer>
        </fieldsynopsis>
        <para>This is a level above the debug level</para>
      </sect2>
      <sect2 xreflabel="getLogLevel()" id="method-net.smartsocket.Logger.getLogLevel">
        <title>getLogLevel()<indexterm><primary>getLogLevel</primary></indexterm><indexterm><primary>Methods</primary><secondary>getLogLevel</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>int</type>
          <methodname>getLogLevel</methodname>
          <void/>
        </methodsynopsis>
        <para>Get the lowest level of log content to be output to the gui console.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the _logLevel</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <varlistentry>
            <term><emphasis>See Also</emphasis></term>
            <listitem>
              <simplelist type="inline"><member>Logger.DEBUG, Logger.INFO, Logger.CRITICAL</member></simplelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="log(java.lang.Object)" id="method-net.smartsocket.Logger.log-java.lang.Object">
        <title>log(Object)<indexterm><primary>log</primary></indexterm><indexterm><primary>Methods</primary><secondary>log</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>log</methodname>
          <methodparam><type>Object</type><parameter>message</parameter></methodparam>
        </methodsynopsis>
        <para>Send a message to the GUI console with the given message at the Logger.DEBUG log level.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>message</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <varlistentry>
            <term><emphasis>See Also</emphasis></term>
            <listitem>
              <simplelist type="inline"><member>Logger.DEBUG, Logger.INFO, Logger.CRITICAL</member></simplelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="log(java.lang.Object, int)" id="method-net.smartsocket.Logger.log-java.lang.Object-int">
        <title>log(Object, int)<indexterm><primary>log</primary></indexterm><indexterm><primary>Methods</primary><secondary>log</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>log</methodname>
          <methodparam><type>Object</type><parameter>message</parameter></methodparam>
          <methodparam><type>int</type><parameter>logLevel</parameter></methodparam>
        </methodsynopsis>
        <para>Send a message to the GUI console with the given message at the desired log level.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>message</para></entry>
                <entry><para/></entry>
              </row>
              <row>
                <entry><para>logLevel</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <varlistentry>
            <term><emphasis>See Also</emphasis></term>
            <listitem>
              <simplelist type="inline"><member>Logger.DEBUG, Logger.INFO, Logger.CRITICAL</member></simplelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="setLogLevel(int)" id="method-net.smartsocket.Logger.setLogLevel-int">
        <title>setLogLevel(int)<indexterm><primary>setLogLevel</primary></indexterm><indexterm><primary>Methods</primary><secondary>setLogLevel</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>setLogLevel</methodname>
          <methodparam><type>int</type><parameter>logLevel</parameter></methodparam>
        </methodsynopsis>
        <para>Sets the minimum log level to display in the console</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>logLevel</para></entry>
                <entry><para> the _logLevel to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <varlistentry>
            <term><emphasis>See Also</emphasis></term>
            <listitem>
              <simplelist type="inline"><member>Logger.DEBUG, Logger.INFO, Logger.CRITICAL</member></simplelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.SmartSocketServer" id="class-net.smartsocket.SmartSocketServer">
      <title>Class SmartSocketServer</title>
      <indexterm><primary>SmartSocketServer</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>SmartSocketServer</secondary></indexterm>
      <para>This class is basically a class that is launched if someone were to launch SmartSocket.jar by itself, instead of using it in their library path. It will basically have some information on how the class is meant to be used, with some useful tutorial-like information.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>SmartSocketServer</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>SmartSocketServer</type>
            <varname>extensionInstance</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>int</type>
            <varname>extensionPort</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>SmartSocketServer</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>main</methodname>
            <methodparam><type>String[]</type><parameter>args</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>open</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/SmartSocketServer/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/SmartSocketServer/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="main(java.lang.String[])" id="method-net.smartsocket.SmartSocketServer.main-java.lang.String_A">
        <title>main(String[])<indexterm><primary>main</primary></indexterm><indexterm><primary>Methods</primary><secondary>main</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>main</methodname>
          <methodparam><type>String[]</type><parameter>args</parameter></methodparam>
        </methodsynopsis>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>args</para></entry>
                <entry><para> the command line arguments</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="open()" id="method-net.smartsocket.SmartSocketServer.open">
        <title>open()<indexterm><primary>open</primary></indexterm><indexterm><primary>Methods</primary><secondary>open</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>open</methodname>
          <void/>
        </methodsynopsis>
        <para>This method is called directly after the GUI is launched when launched as a standalone jar. Here, we'll simply display some information on how SmartSocket is supposed to be used.</para>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="net.smartsocket.clients" id="package-net.smartsocket.clients">
    <title>Package net.Â­smartsocket.Â­clients</title>
    <sect1 xreflabel="net.smartsocket.clients.AbstractClient" id="class-net.smartsocket.clients.AbstractClient">
      <title>Class AbstractClient</title>
      <indexterm><primary>AbstractClient</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>AbstractClient</secondary></indexterm>
      <para>Later on, when UDPClients become available, this class will have more effect. Right now, this class is pretty much used as a base class for a few calls. Pretty much disregard this skeleton class for now.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>AbstractClient</classname>
          </ooclass>
          <ooclass>
            <classname>Thread</classname>
          </ooclass>
          <oointerface>
            <interfacename>Runnable</interfacename>
          </oointerface>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>AbstractClient</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>AbstractClient</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>getUniqueId</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>run</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>setUniqueId</methodname>
            <methodparam><type>Object</type><parameter>uniqueId</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-net.smartsocket.clients.TCPClient"><varname>net.Â­smartsocket.Â­clients.Â­TCPClient</varname></link></member><member><link linkend="class-net.smartsocket.clients.UDPClient"><varname>net.Â­smartsocket.Â­clients.Â­UDPClient</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/clients/AbstractClient/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/clients/AbstractClient/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="getUniqueId()" id="method-net.smartsocket.clients.AbstractClient.getUniqueId">
        <title>getUniqueId()<indexterm><primary>getUniqueId</primary></indexterm><indexterm><primary>Methods</primary><secondary>getUniqueId</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>getUniqueId</methodname>
          <void/>
        </methodsynopsis>
        <para>Some sort of unique identifier to assign this client.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the uniqueId</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="setUniqueId(java.lang.Object)" id="method-net.smartsocket.clients.AbstractClient.setUniqueId-java.lang.Object">
        <title>setUniqueId(Object)<indexterm><primary>setUniqueId</primary></indexterm><indexterm><primary>Methods</primary><secondary>setUniqueId</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>setUniqueId</methodname>
          <methodparam><type>Object</type><parameter>uniqueId</parameter></methodparam>
        </methodsynopsis>
        <para>Some sort of unique identifier to assign this client.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>uniqueId</para></entry>
                <entry><para> the uniqueId to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.clients.TCPClient" id="class-net.smartsocket.clients.TCPClient">
      <title>Class TCPClient</title>
      <indexterm><primary>TCPClient</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>TCPClient</secondary></indexterm>
      <para>The TCPClient class controls the dedicated thread, and input/output for the TCP client. This class does not need to be instatiated by any end users; it's created automatically when the client is accepted by the server socket.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>TCPClient</classname>
          </ooclass>
          <ooclass>
            <classname>AbstractClient</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>TCPClient</methodname>
            <methodparam><type>Socket</type><parameter>client</parameter></methodparam>
            <methodparam><type>TCPExtension</type><parameter>extension</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>Deque&lt;TCPClient&gt;</type>
            <methodname>getClients</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>long</type>
            <methodname>getInboundBytes</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>long</type>
            <methodname>getOutboundBytes</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>setInboundBytes</methodname>
            <methodparam><type>long</type><parameter>aInboundBytes</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>setOutboundBytes</methodname>
            <methodparam><type>long</type><parameter>aOutboundBytes</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>run</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>send</methodname>
            <methodparam><type>ClientCall</type><parameter>message</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/clients/TCPClient/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/clients/TCPClient/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="getClients()" id="method-net.smartsocket.clients.TCPClient.getClients">
        <title>getClients()<indexterm><primary>getClients</primary></indexterm><indexterm><primary>Methods</primary><secondary>getClients</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>Deque&lt;TCPClient&gt;</type>
          <methodname>getClients</methodname>
          <void/>
        </methodsynopsis>
        <para>A list of all TCPClient objects that are running across all extensions</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the clients</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getInboundBytes()" id="method-net.smartsocket.clients.TCPClient.getInboundBytes">
        <title>getInboundBytes()<indexterm><primary>getInboundBytes</primary></indexterm><indexterm><primary>Methods</primary><secondary>getInboundBytes</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>long</type>
          <methodname>getInboundBytes</methodname>
          <void/>
        </methodsynopsis>
        <para>The number of inbound bytes that have been received since the last wipe on the StatisticsTracker poll.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the inboundBytes</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getOutboundBytes()" id="method-net.smartsocket.clients.TCPClient.getOutboundBytes">
        <title>getOutboundBytes()<indexterm><primary>getOutboundBytes</primary></indexterm><indexterm><primary>Methods</primary><secondary>getOutboundBytes</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>long</type>
          <methodname>getOutboundBytes</methodname>
          <void/>
        </methodsynopsis>
        <para>The number of outbound bytes that have been received since the last wipe on the StatisticsTracker poll.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the outboundBytes</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="send(net.smartsocket.protocols.json.ClientCall)" id="method-net.smartsocket.clients.TCPClient.send-net.smartsocket.protocols.json.ClientCall">
        <title>send(ClientCall)<indexterm><primary>send</primary></indexterm><indexterm><primary>Methods</primary><secondary>send</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>send</methodname>
          <methodparam><type>ClientCall</type><parameter>message</parameter></methodparam>
        </methodsynopsis>
        <para>The ClientCall message to send to this client</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>message</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <varlistentry>
            <term><emphasis>See Also</emphasis></term>
            <listitem>
              <simplelist type="inline"><member><literal><link linkend="class-net.smartsocket.protocols.json.ClientCall"><xref linkend="class-net.smartsocket.protocols.json.ClientCall"/></link></literal></member></simplelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="setInboundBytes(long)" id="method-net.smartsocket.clients.TCPClient.setInboundBytes-long">
        <title>setInboundBytes(long)<indexterm><primary>setInboundBytes</primary></indexterm><indexterm><primary>Methods</primary><secondary>setInboundBytes</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>setInboundBytes</methodname>
          <methodparam><type>long</type><parameter>aInboundBytes</parameter></methodparam>
        </methodsynopsis>
        <para>The number of inbound bytes that have been received since the last wipe on the StatisticsTracker poll.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>aInboundBytes</para></entry>
                <entry><para> the inboundBytes to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="setOutboundBytes(long)" id="method-net.smartsocket.clients.TCPClient.setOutboundBytes-long">
        <title>setOutboundBytes(long)<indexterm><primary>setOutboundBytes</primary></indexterm><indexterm><primary>Methods</primary><secondary>setOutboundBytes</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>setOutboundBytes</methodname>
          <methodparam><type>long</type><parameter>aOutboundBytes</parameter></methodparam>
        </methodsynopsis>
        <para>The number of outbound bytes that have been received since the last wipe on the StatisticsTracker poll.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>aOutboundBytes</para></entry>
                <entry><para> the outboundBytes to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.clients.UDPClient" id="class-net.smartsocket.clients.UDPClient">
      <title>Class UDPClient</title>
      <indexterm><primary>UDPClient</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>UDPClient</secondary></indexterm>
      <para>This class will end up mirroring TCPClient in many ways. Implementation for his class will come soon. Sooner if there is more interest in implementing it from fellow 'forkers'.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>UDPClient</classname>
          </ooclass>
          <ooclass>
            <classname>AbstractClient</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>UDPClient</methodname>
            <void/>
          </constructorsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/clients/UDPClient/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/clients/UDPClient/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="net.smartsocket.examples" id="package-net.smartsocket.examples">
    <title>Package net.Â­smartsocket.Â­examples</title>
    <sect1 xreflabel="net.smartsocket.examples.MultiExtensionExample" id="class-net.smartsocket.examples.MultiExtensionExample">
      <title>Class MultiExtensionExample</title>
      <indexterm><primary>MultiExtensionExample</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>MultiExtensionExample</secondary></indexterm>
      <para>A simple class that models how to instantiate a couple test TCPExtension based extensions. You can make a class like this if you are planning on having several extensions running on your server. You can pretty much run as many extensions as your server can handle.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>MultiExtensionExample</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>MultiExtensionExample</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>main</methodname>
            <methodparam><type>String[]</type><parameter>args</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/examples/MultiExtensionExample/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/examples/MultiExtensionExample/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.examples.TCPTest1" id="class-net.smartsocket.examples.TCPTest1">
      <title>Class TCPTest1</title>
      <indexterm><primary>TCPTest1</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>TCPTest1</secondary></indexterm>
      <para>A very simple shell of a TCPExtension extension which includes all abstract methods and a simple onHelloWorld method.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>TCPTest1</classname>
          </ooclass>
          <ooclass>
            <classname>TCPExtension</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>TCPTest1</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>main</methodname>
            <methodparam><type>String[]</type><parameter>args</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onConnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onDisconnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onExtensionReady</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onHelloWorld</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
            <methodparam><type>JSONObject</type><parameter>json</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/examples/TCPTest1/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/examples/TCPTest1/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="onHelloWorld(net.smartsocket.clients.TCPClient, org.json.JSONObject)" id="method-net.smartsocket.examples.TCPTest1.onHelloWorld-net.smartsocket.clients.TCPClient-org.json.JSONObject">
        <title>onHelloWorld(TCPClient, JSONObject)<indexterm><primary>onHelloWorld</primary></indexterm><indexterm><primary>Methods</primary><secondary>onHelloWorld</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>onHelloWorld</methodname>
          <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          <methodparam><type>JSONObject</type><parameter>json</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>A simple method that can be called by sending a JSON string that looks like ["onHelloWorld",{"test","some test data"}]</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>client</para></entry>
                <entry><para/></entry>
              </row>
              <row>
                <entry><para>json</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.examples.TCPTest2" id="class-net.smartsocket.examples.TCPTest2">
      <title>Class TCPTest2</title>
      <indexterm><primary>TCPTest2</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>TCPTest2</secondary></indexterm>
      <para>A very simple shell of a TCPExtension extension which includes all abstract methods and a simple onHelloWorld method.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>TCPTest2</classname>
          </ooclass>
          <ooclass>
            <classname>TCPExtension</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>TCPTest2</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>main</methodname>
            <methodparam><type>String[]</type><parameter>args</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onConnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onDisconnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onExtensionReady</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>onHelloWorld</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
            <methodparam><type>JSONObject</type><parameter>json</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/examples/TCPTest2/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/examples/TCPTest2/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="onHelloWorld(net.smartsocket.clients.TCPClient, org.json.JSONObject)" id="method-net.smartsocket.examples.TCPTest2.onHelloWorld-net.smartsocket.clients.TCPClient-org.json.JSONObject">
        <title>onHelloWorld(TCPClient, JSONObject)<indexterm><primary>onHelloWorld</primary></indexterm><indexterm><primary>Methods</primary><secondary>onHelloWorld</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>onHelloWorld</methodname>
          <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          <methodparam><type>JSONObject</type><parameter>json</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>A simple method that can be called by sending a JSON string that looks like ["onHelloWorld",{"test","some test data"}]</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>client</para></entry>
                <entry><para/></entry>
              </row>
              <row>
                <entry><para>json</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="net.smartsocket.extensions" id="package-net.smartsocket.extensions">
    <title>Package net.Â­smartsocket.Â­extensions</title>
    <sect1 xreflabel="net.smartsocket.extensions.AbstractExtension" id="class-net.smartsocket.extensions.AbstractExtension">
      <title>Class AbstractExtension</title>
      <indexterm><primary>AbstractExtension</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>AbstractExtension</secondary></indexterm>
      <para>This abstract extension is just a skeleton class that holds the runnable and thread lines that allow TCP and later UDP extensions to be runnable. Disregard this class for the time being, it's only used in a few calls in some of the code.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>abstract</modifier>
            <modifier>class</modifier>
            <classname>AbstractExtension</classname>
          </ooclass>
          <ooclass>
            <classname>Thread</classname>
          </ooclass>
          <oointerface>
            <interfacename>Runnable</interfacename>
          </oointerface>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>boolean</type>
            <varname>isConsoleFormRegistered</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>AbstractExtension</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>run</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-net.smartsocket.extensions.TCPExtension"><varname>net.Â­smartsocket.Â­extensions.Â­TCPExtension</varname></link></member><member><link linkend="class-net.smartsocket.extensions.UDPExtension"><varname>net.Â­smartsocket.Â­extensions.Â­UDPExtension</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/extensions/AbstractExtension/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/extensions/AbstractExtension/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.extensions.TCPExtension" id="class-net.smartsocket.extensions.TCPExtension">
      <title>Class TCPExtension</title>
      <indexterm><primary>TCPExtension</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>TCPExtension</secondary></indexterm>
      <para>The TCPExtension class is an abstract class that provides the shell around which all extensions using the TCP protocol will use. This class handles setting up the actual server, creating the initial console gui, extension tabs on the gui, as well as accepting connections and creating separate thread for each client (TCPClient).</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>abstract</modifier>
            <modifier>class</modifier>
            <classname>TCPExtension</classname>
          </ooclass>
          <ooclass>
            <classname>AbstractExtension</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>TCPExtension</methodname>
            <methodparam><type>int</type><parameter>port</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>broadcastMessage</methodname>
            <methodparam><type>ClientCall</type><parameter>call</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Class</type>
            <methodname>getExtension</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>TCPExtension</type>
            <methodname>getExtensionInstance</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>getExtensionName</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>getNewlineCharacter</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>getPort</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>ServerSocket</type>
            <methodname>getSocket</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Thread</type>
            <methodname>getThread</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>isRunning</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>abstract</modifier>
            <type>void</type>
            <methodname>onConnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>abstract</modifier>
            <type>void</type>
            <methodname>onDisconnect</methodname>
            <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>abstract</modifier>
            <type>void</type>
            <methodname>onExtensionReady</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>synchronized</modifier>
            <type>void</type>
            <methodname>run</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>setNewlineCharacter</methodname>
            <methodparam><type>String</type><parameter>newlineCharacter</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>setRunning</methodname>
            <methodparam><type>boolean</type><parameter>running</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-net.smartsocket.examples.TCPTest1"><varname>net.Â­smartsocket.Â­examples.Â­TCPTest1</varname></link></member><member><link linkend="class-net.smartsocket.examples.TCPTest2"><varname>net.Â­smartsocket.Â­examples.Â­TCPTest2</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/extensions/TCPExtension/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/extensions/TCPExtension/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="broadcastMessage(net.smartsocket.protocols.json.ClientCall)" id="method-net.smartsocket.extensions.TCPExtension.broadcastMessage-net.smartsocket.protocols.json.ClientCall">
        <title>broadcastMessage(ClientCall)<indexterm><primary>broadcastMessage</primary></indexterm><indexterm><primary>Methods</primary><secondary>broadcastMessage</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>broadcastMessage</methodname>
          <methodparam><type>ClientCall</type><parameter>call</parameter></methodparam>
        </methodsynopsis>
        <para>Broadcast a message to all connected TCP clients</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>call</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getExtension()" id="method-net.smartsocket.extensions.TCPExtension.getExtension">
        <title>getExtension()<indexterm><primary>getExtension</primary></indexterm><indexterm><primary>Methods</primary><secondary>getExtension</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Class</type>
          <methodname>getExtension</methodname>
          <void/>
        </methodsynopsis>
        <para>The class of the extension object</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the extension</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getExtensionInstance()" id="method-net.smartsocket.extensions.TCPExtension.getExtensionInstance">
        <title>getExtensionInstance()<indexterm><primary>getExtensionInstance</primary></indexterm><indexterm><primary>Methods</primary><secondary>getExtensionInstance</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>TCPExtension</type>
          <methodname>getExtensionInstance</methodname>
          <void/>
        </methodsynopsis>
        <para>The instance object of the extension class.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the extensionInstance</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getExtensionName()" id="method-net.smartsocket.extensions.TCPExtension.getExtensionName">
        <title>getExtensionName()<indexterm><primary>getExtensionName</primary></indexterm><indexterm><primary>Methods</primary><secondary>getExtensionName</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>getExtensionName</methodname>
          <void/>
        </methodsynopsis>
        <para>The string name of the extension class.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the extensionName</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getNewlineCharacter()" id="method-net.smartsocket.extensions.TCPExtension.getNewlineCharacter">
        <title>getNewlineCharacter()<indexterm><primary>getNewlineCharacter</primary></indexterm><indexterm><primary>Methods</primary><secondary>getNewlineCharacter</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>getNewlineCharacter</methodname>
          <void/>
        </methodsynopsis>
        <para>This is the newline character that is sent at the end of each send to the client. It can be changed on an extension-level basis. It's necessary to have this functionality because different client languages (c/++, Java, ActionScript, etc.) will have different line ending characters that are used for socket connection read/write.</para>
        <para> Default is set to \r\n</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the newlineCharacter</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getPort()" id="method-net.smartsocket.extensions.TCPExtension.getPort">
        <title>getPort()<indexterm><primary>getPort</primary></indexterm><indexterm><primary>Methods</primary><secondary>getPort</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>getPort</methodname>
          <void/>
        </methodsynopsis>
        <para>The port number that this extension is running on</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the port</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getSocket()" id="method-net.smartsocket.extensions.TCPExtension.getSocket">
        <title>getSocket()<indexterm><primary>getSocket</primary></indexterm><indexterm><primary>Methods</primary><secondary>getSocket</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>ServerSocket</type>
          <methodname>getSocket</methodname>
          <void/>
        </methodsynopsis>
        <para>The server's socket object</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the socket</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getThread()" id="method-net.smartsocket.extensions.TCPExtension.getThread">
        <title>getThread()<indexterm><primary>getThread</primary></indexterm><indexterm><primary>Methods</primary><secondary>getThread</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Thread</type>
          <methodname>getThread</methodname>
          <void/>
        </methodsynopsis>
        <para>The current thread id that this extension instance is running on</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the thread</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="isRunning()" id="method-net.smartsocket.extensions.TCPExtension.isRunning">
        <title>isRunning()<indexterm><primary>isRunning</primary></indexterm><indexterm><primary>Methods</primary><secondary>isRunning</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>isRunning</methodname>
          <void/>
        </methodsynopsis>
        <para>Determines if the server is running or not. When set to false, this server will cease to accept incoming connections.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> the running</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="onConnect(net.smartsocket.clients.TCPClient)" id="method-net.smartsocket.extensions.TCPExtension.onConnect-net.smartsocket.clients.TCPClient">
        <title>onConnect(TCPClient)<indexterm><primary>onConnect</primary></indexterm><indexterm><primary>Methods</primary><secondary>onConnect</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>abstract</modifier>
          <type>void</type>
          <methodname>onConnect</methodname>
          <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
        </methodsynopsis>
        <para>This method will be called on the extension when a user joins the server.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>client</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="onDisconnect(net.smartsocket.clients.TCPClient)" id="method-net.smartsocket.extensions.TCPExtension.onDisconnect-net.smartsocket.clients.TCPClient">
        <title>onDisconnect(TCPClient)<indexterm><primary>onDisconnect</primary></indexterm><indexterm><primary>Methods</primary><secondary>onDisconnect</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>abstract</modifier>
          <type>void</type>
          <methodname>onDisconnect</methodname>
          <methodparam><type>TCPClient</type><parameter>client</parameter></methodparam>
        </methodsynopsis>
        <para>This method will be called on the extension when a user leaves the server.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>client</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="onExtensionReady()" id="method-net.smartsocket.extensions.TCPExtension.onExtensionReady">
        <title>onExtensionReady()<indexterm><primary>onExtensionReady</primary></indexterm><indexterm><primary>Methods</primary><secondary>onExtensionReady</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>abstract</modifier>
          <type>void</type>
          <methodname>onExtensionReady</methodname>
          <void/>
        </methodsynopsis>
        <para>This method will be called on the extension the server is ready for business.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>client</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="setNewlineCharacter(java.lang.String)" id="method-net.smartsocket.extensions.TCPExtension.setNewlineCharacter-java.lang.String">
        <title>setNewlineCharacter(String)<indexterm><primary>setNewlineCharacter</primary></indexterm><indexterm><primary>Methods</primary><secondary>setNewlineCharacter</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>setNewlineCharacter</methodname>
          <methodparam><type>String</type><parameter>newlineCharacter</parameter></methodparam>
        </methodsynopsis>
        <para>This is the newline character that is sent at the end of each send to the client. It can be changed on an extension-level basis. It's necessary to have this functionality because different client languages (c/++, Java, ActionScript, etc.) will have different line ending characters that are used for socket connection read/write.</para>
        <para> Default is set to \r\n</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>newlineCharacter</para></entry>
                <entry><para> the newlineCharacter to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="setRunning(boolean)" id="method-net.smartsocket.extensions.TCPExtension.setRunning-boolean">
        <title>setRunning(boolean)<indexterm><primary>setRunning</primary></indexterm><indexterm><primary>Methods</primary><secondary>setRunning</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>setRunning</methodname>
          <methodparam><type>boolean</type><parameter>running</parameter></methodparam>
        </methodsynopsis>
        <para>Determines if the server is running or not. When set to false, this server will cease to accept incoming connections.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>running</para></entry>
                <entry><para> the running to set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.extensions.UDPExtension" id="class-net.smartsocket.extensions.UDPExtension">
      <title>Class UDPExtension</title>
      <indexterm><primary>UDPExtension</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>UDPExtension</secondary></indexterm>
      <para>This class will end up mirroring TCPExtension in many ways. Implementation for his class will come soon. Sooner if there is more interest in implementing it from fellow 'forkers'.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>UDPExtension</classname>
          </ooclass>
          <ooclass>
            <classname>AbstractExtension</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>UDPExtension</methodname>
            <void/>
          </constructorsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/extensions/UDPExtension/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/extensions/UDPExtension/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="net.smartsocket.forms" id="package-net.smartsocket.forms">
    <title>Package net.Â­smartsocket.Â­forms</title>
    <sect1 xreflabel="net.smartsocket.forms.ConsoleForm" id="class-net.smartsocket.forms.ConsoleForm">
      <title>Class ConsoleForm</title>
      <indexterm><primary>ConsoleForm</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>ConsoleForm</secondary></indexterm>
      <para>The ConsoleForm class is the hub of all gui activity.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>ConsoleForm</classname>
          </ooclass>
          <ooclass>
            <classname>JFrame</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JLabel</type>
            <varname>lblConnectedClients</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JLabel</type>
            <varname>lblDownstream</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JLabel</type>
            <varname>lblMemoryUsage</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JLabel</type>
            <varname>lblUpstream</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JLabel</type>
            <varname>lblUptime</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JEditorPane</type>
            <varname>logText</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JMenuBar</type>
            <varname>menuBar</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>Dimension</type>
            <varname>screenSize</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JScrollPane</type>
            <varname>scrollPaneCritical</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JTabbedPane</type>
            <varname>tabbedPane</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>ConsoleForm</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>synchronized</modifier>
            <type>void</type>
            <methodname>start</methodname>
            <methodparam><type>AbstractExtension</type><parameter>caller</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/forms/ConsoleForm/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/forms/ConsoleForm/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="ConsoleForm()" id="constructor-net.smartsocket.forms.ConsoleForm">
        <title>ConsoleForm()<indexterm><primary>ConsoleForm</primary></indexterm><indexterm><primary>Methods</primary><secondary>ConsoleForm</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>ConsoleForm</methodname>
          <void/>
        </constructorsynopsis>
        <para>Creates new form ConsoleForm</para>
      </sect2>
      <sect2 xreflabel="start(net.smartsocket.extensions.AbstractExtension)" id="method-net.smartsocket.forms.ConsoleForm.start-net.smartsocket.extensions.AbstractExtension">
        <title>start(AbstractExtension)<indexterm><primary>start</primary></indexterm><indexterm><primary>Methods</primary><secondary>start</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>synchronized</modifier>
          <type>void</type>
          <methodname>start</methodname>
          <methodparam><type>AbstractExtension</type><parameter>caller</parameter></methodparam>
        </methodsynopsis>
        <para>This method is called when TCP, or UDP extension is initialized. If there are multiple extensions that will be ran, only the first extension to load will effect this console form. The addition of the tabs for each extension is done through the actual TCPExtension and UDPExtension classes.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>caller</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.forms.ExtensionConsole" id="class-net.smartsocket.forms.ExtensionConsole">
      <title>Class ExtensionConsole</title>
      <indexterm><primary>ExtensionConsole</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>ExtensionConsole</secondary></indexterm>
      <para>This class controls adding the tab interface and dedicated console for each extension. Modification of this class should be done for customization of the display of the extension's tabbed controller.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>ExtensionConsole</classname>
          </ooclass>
          <ooclass>
            <classname>JScrollPane</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <type>JEditorPane</type>
            <varname>logText</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>ExtensionConsole</methodname>
            <methodparam><type>String</type><parameter>name</parameter></methodparam>
          </constructorsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/forms/ExtensionConsole/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/forms/ExtensionConsole/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="ExtensionConsole(java.lang.String)" id="constructor-net.smartsocket.forms.ExtensionConsole-java.lang.String">
        <title>ExtensionConsole(String)<indexterm><primary>ExtensionConsole</primary></indexterm><indexterm><primary>Methods</primary><secondary>ExtensionConsole</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>ExtensionConsole</methodname>
          <methodparam><type>String</type><parameter>name</parameter></methodparam>
        </constructorsynopsis>
        <para>The constructor of the component to be displayed in the tabbed pane</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>name</para></entry>
                <entry><para> Currently unused, but may be in the future.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="net.smartsocket.forms.StatisticsTracker" id="class-net.smartsocket.forms.StatisticsTracker">
      <title>Class StatisticsTracker</title>
      <indexterm><primary>StatisticsTracker</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>StatisticsTracker</secondary></indexterm>
      <para>Statistics tracker is a class that controls displaying how many clients are connected, etc., in the bottom of the gui</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>StatisticsTracker</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>StatisticsTracker</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>updateClientsConnectedLabel</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>updateDownstreamAvailableLabel</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>updateMemoryUsageLabel</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>updateUpstreamLabel</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>updateUptimeLabel</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/forms/StatisticsTracker/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/forms/StatisticsTracker/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="net.smartsocket.protocols.json" id="package-net.smartsocket.protocols.json">
    <title>Package net.Â­smartsocket.Â­protocols.Â­json</title>
    <sect1 xreflabel="net.smartsocket.protocols.json.ClientCall" id="class-net.smartsocket.protocols.json.ClientCall">
      <title>Class ClientCall</title>
      <indexterm><primary>ClientCall</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>ClientCall</secondary></indexterm>
      <para>The ClientCall class is a simple way to construct a JSON formatted message to send to a client.</para>
      <para><emphasis role="bold">Usage:</emphasis></para>
      <para><literal> ClientCall call = new ClientCall("methodNameOnClientApplication"); call.put("propertyName", "propertyValue"); client.send(call);</literal></para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>ClientCall</classname>
          </ooclass>
          <ooclass>
            <classname>JSONArray</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>ClientCall</methodname>
            <methodparam><type>String</type><parameter>method</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>ClientCall</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>XaeroDegreaz</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/net/smartsocket/protocols/json/ClientCall/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/net/smartsocket/protocols/json/ClientCall/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="ClientCall(java.lang.String)" id="constructor-net.smartsocket.protocols.json.ClientCall-java.lang.String">
        <title>ClientCall(String)<indexterm><primary>ClientCall</primary></indexterm><indexterm><primary>Methods</primary><secondary>ClientCall</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>ClientCall</methodname>
          <methodparam><type>String</type><parameter>method</parameter></methodparam>
        </constructorsynopsis>
        <para>Instantiate a new ClientCall object for calling a method on a client.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>method</para></entry>
                <entry><para> The String name of the method to be called on the client.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, java.lang.Object)" id="method-net.smartsocket.protocols.json.ClientCall.put-java.lang.String-java.lang.Object">
        <title>put(String, Object)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>ClientCall</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Create or modify a property on the client call.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> The key name of the property</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> The value of the property</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
  </chapter>
  <chapter xreflabel="org.json" id="package-org.json">
    <title>Package org.Â­json</title>
    <sect1 xreflabel="org.json.CDL" id="class-org.json.CDL">
      <title>Class CDL</title>
      <indexterm><primary>CDL</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>CDL</secondary></indexterm>
      <para>This provides static methods to convert comma delimited text into a JSONArray, and to covert a JSONArray into comma delimited text. Comma delimited text is a very popular format for data interchange. It is understood by most database, spreadsheet, and organizer programs. </para>
      <para> Each row of text represents a row in a table or a data record. Each row ends with a NEWLINE character. Each row contains one or more values. Values are separated by commas. A value can contain any character except for comma, unless is is wrapped in single quotes or double quotes. </para>
      <para> The first row usually contains the names of the columns. </para>
      <para> A comma delimited list can be converted into a JSONArray of JSONObjects. The names for the elements in the JSONObjects can be taken from the names in the first row.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>CDL</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>CDL</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>rowToJSONArray</methodname>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>rowToJSONObject</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>rowToString</methodname>
            <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/CDL/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/CDL/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="rowToJSONArray(org.json.JSONTokener)" id="method-org.json.CDL.rowToJSONArray-org.json.JSONTokener">
        <title>rowToJSONArray(JSONTokener)<indexterm><primary>rowToJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>rowToJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>rowToJSONArray</methodname>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray of strings from a row of comma delimited values.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> A JSONTokener of the source text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of strings.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="rowToJSONObject(org.json.JSONArray, org.json.JSONTokener)" id="method-org.json.CDL.rowToJSONObject-org.json.JSONArray-org.json.JSONTokener">
        <title>rowToJSONObject(JSONArray, JSONTokener)<indexterm><primary>rowToJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>rowToJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>rowToJSONObject</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONObject from a row of comma delimited text, using a parallel JSONArray of strings to provides the names of the elements.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray of names. This is commonly obtained from the first row of a comma delimited text file using the rowToJSONArray method.</para></entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> A JSONTokener of the source text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject combining the names and values.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="rowToString(org.json.JSONArray)" id="method-org.json.CDL.rowToString-org.json.JSONArray">
        <title>rowToString(JSONArray)<indexterm><primary>rowToString</primary></indexterm><indexterm><primary>Methods</primary><secondary>rowToString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>rowToString</methodname>
          <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
        </methodsynopsis>
        <para>Produce a comma delimited text row from a JSONArray. Values containing the comma character will be quoted. Troublesome characters may be removed.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>ja</para></entry>
                <entry><para> A JSONArray of strings.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string ending in NEWLINE.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toJSONArray(org.json.JSONArray, org.json.JSONTokener)" id="method-org.json.CDL.toJSONArray-org.json.JSONArray-org.json.JSONTokener">
        <title>toJSONArray(JSONArray, JSONTokener)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray of strings.</para></entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> A JSONTokener of the source text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONArray(org.json.JSONArray, java.lang.String)" id="method-org.json.CDL.toJSONArray-org.json.JSONArray-java.lang.String">
        <title>toJSONArray(JSONArray, String)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray of JSONObjects from a comma delimited text string using a supplied JSONArray as the source of element names.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray of strings.</para></entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The comma delimited text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONArray(org.json.JSONTokener)" id="method-org.json.CDL.toJSONArray-org.json.JSONTokener">
        <title>toJSONArray(JSONTokener)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> The JSONTokener containing the comma delimited text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONArray(java.lang.String)" id="method-org.json.CDL.toJSONArray-java.lang.String">
        <title>toJSONArray(String)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray of JSONObjects from a comma delimited text string, using the first row as a source of names.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The comma delimited text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONArray)" id="method-org.json.CDL.toString-org.json.JSONArray">
        <title>toString(JSONArray)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a comma delimited text from a JSONArray of JSONObjects. The first row will be a list of names obtained by inspecting the first JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>ja</para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A comma delimited text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONArray, org.json.JSONArray)" id="method-org.json.CDL.toString-org.json.JSONArray-org.json.JSONArray">
        <title>toString(JSONArray, JSONArray)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a comma delimited text from a JSONArray of JSONObjects using a provided list of names. The list of names is not included in the output.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray of strings.</para></entry>
              </row>
              <row>
                <entry><para>ja</para></entry>
                <entry><para> A JSONArray of JSONObjects.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A comma delimited text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.Cookie" id="class-org.json.Cookie">
      <title>Class Cookie</title>
      <indexterm><primary>Cookie</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>Cookie</secondary></indexterm>
      <para>Convert a web browser cookie specification to a JSONObject and back. JSON and Cookies are both notations for name/value pairs.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>Cookie</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>Cookie</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>escape</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>unescape</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/Cookie/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/Cookie/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="escape(java.lang.String)" id="method-org.json.Cookie.escape-java.lang.String">
        <title>escape(String)<indexterm><primary>escape</primary></indexterm><indexterm><primary>Methods</primary><secondary>escape</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>escape</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <para>Produce a copy of a string in which the characters '+', '%', '=', ';' and control characters are replaced with "%hh". This is a gentle form of URL encoding, attempting to cause as little distortion to the string as possible. The characters '=' and ';' are meta characters in cookies. By convention, they are escaped using the URL-encoding. This is only a convention, not a standard. Often, cookies are expected to have encoded values. We encode '=' and ';' because we must. We encode '%' and '+' because they are meta characters in URL encoding.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The source string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The escaped result.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toJSONObject(java.lang.String)" id="method-org.json.Cookie.toJSONObject-java.lang.String">
        <title>toJSONObject(String)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a cookie specification string into a JSONObject. The string will contain a name value pair separated by '='. The name and the value will be unescaped, possibly converting '+' and '%' sequences. The cookie properties may follow, separated by ';', also represented as name=value (except the secure property, which does not have a value). The name will be stored under the key "name", and the value will be stored under the key "value". This method does not do checking or validation of the parameters. It only converts the cookie string into a JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The cookie specification string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject containing "name", "value", and possibly other members.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONObject)" id="method-org.json.Cookie.toString-org.json.JSONObject">
        <title>toString(JSONObject)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a JSONObject into a cookie specification string. The JSONObject must contain "name" and "value" members. If the JSONObject contains "expires", "domain", "path", or "secure" members, they will be appended to the cookie specification string. All other members are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>jo</para></entry>
                <entry><para> A JSONObject</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A cookie specification string</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="unescape(java.lang.String)" id="method-org.json.Cookie.unescape-java.lang.String">
        <title>unescape(String)<indexterm><primary>unescape</primary></indexterm><indexterm><primary>Methods</primary><secondary>unescape</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>unescape</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <para>Convert <literal>%</literal><emphasis>hh</emphasis> sequences to single characters, and convert plus to space.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A string that may contain <literal>+</literal>Â (plus) and <literal>%</literal><emphasis>hh</emphasis> sequences.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The unescaped string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.CookieList" id="class-org.json.CookieList">
      <title>Class CookieList</title>
      <indexterm><primary>CookieList</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>CookieList</secondary></indexterm>
      <para>Convert a web browser cookie list string to a JSONObject and back.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>CookieList</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>CookieList</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/CookieList/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/CookieList/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="toJSONObject(java.lang.String)" id="method-org.json.CookieList.toJSONObject-java.lang.String">
        <title>toJSONObject(String)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a cookie list into a JSONObject. A cookie list is a sequence of name/value pairs. The names are separated from the values by '='. The pairs are separated by ';'. The names and the values will be unescaped, possibly converting '+' and '%' sequences. To add a cookie to a cooklist, cookielistJSONObject.put(cookieJSONObject.getString("name"), cookieJSONObject.getString("value"));</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A cookie list string</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONObject)" id="method-org.json.CookieList.toString-org.json.JSONObject">
        <title>toString(JSONObject)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a JSONObject into a cookie list. A cookie list is a sequence of name/value pairs. The names are separated from the values by '='. The pairs are separated by ';'. The characters '%', '+', '=', and ';' in the names and values are replaced by "%hh".</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>jo</para></entry>
                <entry><para> A JSONObject</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A cookie list string</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.HTTP" id="class-org.json.HTTP">
      <title>Class HTTP</title>
      <indexterm><primary>HTTP</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>HTTP</secondary></indexterm>
      <para>Convert an HTTP header to a JSONObject and back.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>HTTP</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>String</type>
            <varname>CRLF</varname>
            <initializer>"\r\n"</initializer>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>HTTP</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/HTTP/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/HTTP/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="CRLF" id="field-org.json.HTTP.CRLF">
        <title>CRLF</title>
        <indexterm><primary>CRLF</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>CRLF</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>String</type>
          <varname>CRLF</varname>
          <initializer>"\r\n"</initializer>
        </fieldsynopsis>
        <para>Carriage return/line feed.</para>
      </sect2>
      <sect2 xreflabel="toJSONObject(java.lang.String)" id="method-org.json.HTTP.toJSONObject-java.lang.String">
        <title>toJSONObject(String)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert an HTTP header string into a JSONObject. It can be a request header or a response header. A request header will contain </para>
        <screen>{
    Method: "POST" (for example),
    "Request-URI": "/" (for example),
    "HTTP-Version": "HTTP/1.1" (for example)
 }</screen>
        <para> A response header will contain <screen>{
    "HTTP-Version": "HTTP/1.1" (for example),
    "Status-Code": "200" (for example),
    "Reason-Phrase": "OK" (for example)
 }</screen> In addition, the other parameters in the header will be captured, using the HTTP field names as JSON names, so that <screen>
    Date: Sun, 26 May 2002 18:06:04 GMT
    Cookie: Q=q2=PPEAsg--; B=677gi6ouf29bn&amp;b=2&amp;f=s
    Cache-Control: no-cache</screen> become <screen>{...
    Date: "Sun, 26 May 2002 18:06:04 GMT",
    Cookie: "Q=q2=PPEAsg--; B=677gi6ouf29bn&amp;b=2&amp;f=s",
    "Cache-Control": "no-cache",
 ...}</screen> It does no further checking or conversion. It does not parse dates. It does not do '%' transforms on URLs.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> An HTTP header string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject containing the elements and attributes of the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONObject)" id="method-org.json.HTTP.toString-org.json.JSONObject">
        <title>toString(JSONObject)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a JSONObject into an HTTP header. A request header must contain </para>
        <screen>{
    Method: "POST" (for example),
    "Request-URI": "/" (for example),
    "HTTP-Version": "HTTP/1.1" (for example)
 }</screen>
        <para> A response header must contain <screen>{
    "HTTP-Version": "HTTP/1.1" (for example),
    "Status-Code": "200" (for example),
    "Reason-Phrase": "OK" (for example)
 }</screen> Any other members of the JSONObject will be output as HTTP fields. The result will end with two CRLF pairs.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>jo</para></entry>
                <entry><para> A JSONObject</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An HTTP header string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the object does not contain enough information.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.HTTPTokener" id="class-org.json.HTTPTokener">
      <title>Class HTTPTokener</title>
      <indexterm><primary>HTTPTokener</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>HTTPTokener</secondary></indexterm>
      <para>The HTTPTokener extends the JSONTokener to provide additional methods for the parsing of HTTP headers.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>HTTPTokener</classname>
          </ooclass>
          <ooclass>
            <classname>JSONTokener</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>HTTPTokener</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>nextToken</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/HTTPTokener/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/HTTPTokener/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="HTTPTokener(java.lang.String)" id="constructor-org.json.HTTPTokener-java.lang.String">
        <title>HTTPTokener(String)<indexterm><primary>HTTPTokener</primary></indexterm><indexterm><primary>Methods</primary><secondary>HTTPTokener</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>HTTPTokener</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct an HTTPTokener from a string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A source string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="nextToken()" id="method-org.json.HTTPTokener.nextToken">
        <title>nextToken()<indexterm><primary>nextToken</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextToken</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>nextToken</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next token or string. This is used in parsing HTTP headers.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONArray" id="class-org.json.JSONArray">
      <title>Class JSONArray</title>
      <indexterm><primary>JSONArray</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONArray</secondary></indexterm>
      <para>A JSONArray is an ordered sequence of values. Its external text form is a string wrapped in square brackets with commas separating the values. The internal form is an object having <literal>get</literal> and <literal>opt</literal> methods for accessing the values by index, and <literal>put</literal> methods for adding or replacing values. The values can be any of these types: <literal>Boolean</literal>, <literal>JSONArray</literal>, <literal>JSONObject</literal>, <literal>Number</literal>, <literal>String</literal>, or the <literal>JSONObject.NULL object</literal>. </para>
      <para> The constructor can convert a JSON text into a Java object. The <literal>toString</literal> method converts to JSON text. </para>
      <para> A <literal>get</literal> method returns a value if one can be found, and throws an exception if one cannot be found. An <literal>opt</literal> method returns a default value instead of throwing an exception, and so is useful for obtaining optional values. </para>
      <para> The generic <literal>get()</literal> and <literal>opt()</literal> methods return an object which you can cast or query for type. There are also typed <literal>get</literal> and <literal>opt</literal> methods that do type checking and type coercion for you. </para>
      <para> The texts produced by the <literal>toString</literal> methods strictly conform to JSON syntax rules. The constructors are more forgiving in the texts they will accept: </para>
      <itemizedlist><listitem>
          <para> An extra <literal>,</literal>Â (comma) may appear just before the closing bracket.</para>
        </listitem>
<listitem>
          <para> The <literal>null</literal> value will be inserted when there is <literal>,</literal>Â (comma) elision.</para>
        </listitem>
<listitem>
          <para> Strings may be quoted with <literal/></para>
        </listitem>
</itemizedlist>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONArray</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONArray</methodname>
            <void/>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONArray</methodname>
            <methodparam><type>Object</type><parameter>array</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONArray</methodname>
            <methodparam><type>String</type><parameter>source</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONArray</methodname>
            <methodparam><type>Collection</type><parameter>collection</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONArray</methodname>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>get</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>getBoolean</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>getDouble</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>getInt</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>getJSONArray</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>getJSONObject</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>getLong</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>getString</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>isNull</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>join</methodname>
            <methodparam><type>String</type><parameter>separator</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>length</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>opt</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>optBoolean</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>optBoolean</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>boolean</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>optDouble</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>optDouble</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>double</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>optInt</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>optInt</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>int</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>optJSONArray</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>optJSONObject</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>optLong</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>optLong</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>long</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>optString</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>optString</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>String</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>double</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>double</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>int</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>Map</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
            <methodparam><type>long</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>Map</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>put</methodname>
            <methodparam><type>long</type><parameter>value</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>remove</methodname>
            <methodparam><type>int</type><parameter>index</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>int</type><parameter>indentFactor</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Writer</type>
            <methodname>write</methodname>
            <methodparam><type>Writer</type><parameter>writer</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-net.smartsocket.protocols.json.ClientCall"><varname>net.Â­smartsocket.Â­protocols.Â­json.Â­ClientCall</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONArray/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONArray/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONArray()" id="constructor-org.json.JSONArray">
        <title>JSONArray()<indexterm><primary>JSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONArray</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONArray</methodname>
          <void/>
        </constructorsynopsis>
        <para>Construct an empty JSONArray.</para>
      </sect2>
      <sect2 xreflabel="JSONArray(java.util.Collection)" id="constructor-org.json.JSONArray-java.util.Collection">
        <title>JSONArray(Collection)<indexterm><primary>JSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONArray</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONArray</methodname>
          <methodparam><type>Collection</type><parameter>collection</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONArray from a Collection.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>collection</para></entry>
                <entry><para> A Collection.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="JSONArray(org.json.JSONTokener)" id="constructor-org.json.JSONArray-org.json.JSONTokener">
        <title>JSONArray(JSONTokener)<indexterm><primary>JSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONArray</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONArray</methodname>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONArray from a JSONTokener.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> A JSONTokener</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is a syntax error.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONArray(java.lang.Object)" id="constructor-org.json.JSONArray-java.lang.Object">
        <title>JSONArray(Object)<indexterm><primary>JSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONArray</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONArray</methodname>
          <methodparam><type>Object</type><parameter>array</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONArray from an array</para>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If not an array.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONArray(java.lang.String)" id="constructor-org.json.JSONArray-java.lang.String">
        <title>JSONArray(String)<indexterm><primary>JSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONArray</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONArray</methodname>
          <methodparam><type>String</type><parameter>source</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONArray from a source JSON text.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>source</para></entry>
                <entry><para> A string that begins with <literal>[</literal>Â (left bracket) and ends with <literal>]</literal>Â (right bracket).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is a syntax error.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="get(int)" id="method-org.json.JSONArray.get-int">
        <title>get(int)<indexterm><primary>get</primary></indexterm><indexterm><primary>Methods</primary><secondary>get</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>get</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the object value associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is no value for the index.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getBoolean(int)" id="method-org.json.JSONArray.getBoolean-int">
        <title>getBoolean(int)<indexterm><primary>getBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>getBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>getBoolean</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the boolean value associated with an index. The string values "true" and "false" are converted to boolean.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is no value for the index or if the value is not convertible to boolean.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getDouble(int)" id="method-org.json.JSONArray.getDouble-int">
        <title>getDouble(int)<indexterm><primary>getDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>getDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>getDouble</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the double value associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is not found or if the value cannot be converted to a number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getInt(int)" id="method-org.json.JSONArray.getInt-int">
        <title>getInt(int)<indexterm><primary>getInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>getInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>getInt</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the int value associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is not found or if the value is not a number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getJSONArray(int)" id="method-org.json.JSONArray.getJSONArray-int">
        <title>getJSONArray(int)<indexterm><primary>getJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>getJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>getJSONArray</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the JSONArray associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is no value for the index. or if the value is not a JSONArray</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getJSONObject(int)" id="method-org.json.JSONArray.getJSONObject-int">
        <title>getJSONObject(int)<indexterm><primary>getJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>getJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>getJSONObject</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the JSONObject associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> subscript</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is no value for the index or if the value is not a JSONObject</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getLong(int)" id="method-org.json.JSONArray.getLong-int">
        <title>getLong(int)<indexterm><primary>getLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>getLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>getLong</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the long value associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is not found or if the value cannot be converted to a number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getString(int)" id="method-org.json.JSONArray.getString-int">
        <title>getString(int)<indexterm><primary>getString</primary></indexterm><indexterm><primary>Methods</primary><secondary>getString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>getString</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the string associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is no value for the index.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="isNull(int)" id="method-org.json.JSONArray.isNull-int">
        <title>isNull(int)<indexterm><primary>isNull</primary></indexterm><indexterm><primary>Methods</primary><secondary>isNull</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>isNull</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Determine if the value is null.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> true if the value at the index is null, or if there is no value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="join(java.lang.String)" id="method-org.json.JSONArray.join-java.lang.String">
        <title>join(String)<indexterm><primary>join</primary></indexterm><indexterm><primary>Methods</primary><secondary>join</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>join</methodname>
          <methodparam><type>String</type><parameter>separator</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Make a string from the contents of this JSONArray. The <literal>separator</literal> string is inserted between each element. Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>separator</para></entry>
                <entry><para> A string that will be inserted between the elements.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the array contains an invalid number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="length()" id="method-org.json.JSONArray.length">
        <title>length()<indexterm><primary>length</primary></indexterm><indexterm><primary>Methods</primary><secondary>length</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>length</methodname>
          <void/>
        </methodsynopsis>
        <para>Get the number of elements in the JSONArray, included nulls.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The length (or size).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="opt(int)" id="method-org.json.JSONArray.opt-int">
        <title>opt(int)<indexterm><primary>opt</primary></indexterm><indexterm><primary>Methods</primary><secondary>opt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>opt</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional object value associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object value, or null if there is no object at that index.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optBoolean(int)" id="method-org.json.JSONArray.optBoolean-int">
        <title>optBoolean(int)<indexterm><primary>optBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>optBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>optBoolean</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional boolean value associated with an index. It returns false if there is no value at that index, or if the value is not Boolean.TRUE or the String "true".</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optBoolean(int, boolean)" id="method-org.json.JSONArray.optBoolean-int-boolean">
        <title>optBoolean(int, boolean)<indexterm><primary>optBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>optBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>optBoolean</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>boolean</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional boolean value associated with an index. It returns the defaultValue if there is no value at that index or if it is not a Boolean or the String "true" or "false" (case insensitive).</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> A boolean default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optDouble(int)" id="method-org.json.JSONArray.optDouble-int">
        <title>optDouble(int)<indexterm><primary>optDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>optDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>optDouble</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional double value associated with an index. NaN is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optDouble(int, double)" id="method-org.json.JSONArray.optDouble-int-double">
        <title>optDouble(int, double)<indexterm><primary>optDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>optDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>optDouble</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>double</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional double value associated with an index. The defaultValue is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> subscript</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optInt(int)" id="method-org.json.JSONArray.optInt-int">
        <title>optInt(int)<indexterm><primary>optInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>optInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>optInt</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional int value associated with an index. Zero is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optInt(int, int)" id="method-org.json.JSONArray.optInt-int-int">
        <title>optInt(int, int)<indexterm><primary>optInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>optInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>optInt</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>int</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional int value associated with an index. The defaultValue is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optJSONArray(int)" id="method-org.json.JSONArray.optJSONArray-int">
        <title>optJSONArray(int)<indexterm><primary>optJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>optJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>optJSONArray</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional JSONArray associated with an index.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> subscript</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray value, or null if the index has no value, or if the value is not a JSONArray.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optJSONObject(int)" id="method-org.json.JSONArray.optJSONObject-int">
        <title>optJSONObject(int)<indexterm><primary>optJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>optJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>optJSONObject</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional JSONObject associated with an index. Null is returned if the key is not found, or null if the index has no value, or if the value is not a JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optLong(int)" id="method-org.json.JSONArray.optLong-int">
        <title>optLong(int)<indexterm><primary>optLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>optLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>optLong</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional long value associated with an index. Zero is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optLong(int, long)" id="method-org.json.JSONArray.optLong-int-long">
        <title>optLong(int, long)<indexterm><primary>optLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>optLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>optLong</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>long</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional long value associated with an index. The defaultValue is returned if there is no value for the index, or if the value is not a number and cannot be converted to a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optString(int)" id="method-org.json.JSONArray.optString-int">
        <title>optString(int)<indexterm><primary>optString</primary></indexterm><indexterm><primary>Methods</primary><secondary>optString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>optString</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional string value associated with an index. It returns an empty string if there is no value at that index. If the value is not a string and is not null, then it is coverted to a string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optString(int, java.lang.String)" id="method-org.json.JSONArray.optString-int-java.lang.String">
        <title>optString(int, String)<indexterm><primary>optString</primary></indexterm><indexterm><primary>Methods</primary><secondary>optString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>optString</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>String</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get the optional string associated with an index. The defaultValue is returned if the key is not found.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index must be between 0 and length() - 1.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(boolean)" id="method-org.json.JSONArray.put-boolean">
        <title>put(boolean)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Append a boolean value. This increases the array's length by one.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A boolean value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(java.util.Collection)" id="method-org.json.JSONArray.put-java.util.Collection">
        <title>put(Collection)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Put a value in the JSONArray, where the value will be a JSONArray which is produced from a Collection.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A Collection value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(double)" id="method-org.json.JSONArray.put-double">
        <title>put(double)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>double</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append a double value. This increases the array's length by one.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A double value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the value is not finite.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int)" id="method-org.json.JSONArray.put-int">
        <title>put(int)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Append an int value. This increases the array's length by one.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An int value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(int, boolean)" id="method-org.json.JSONArray.put-int-boolean">
        <title>put(int, boolean)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put or replace a boolean value in the JSONArray. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A boolean value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, java.util.Collection)" id="method-org.json.JSONArray.put-int-java.util.Collection">
        <title>put(int, Collection)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a value in the JSONArray, where the value will be a JSONArray which is produced from a Collection.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A Collection value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative or if the value is not finite.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, double)" id="method-org.json.JSONArray.put-int-double">
        <title>put(int, double)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>double</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put or replace a double value. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A double value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative or if the value is not finite.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, int)" id="method-org.json.JSONArray.put-int-int">
        <title>put(int, int)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>int</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put or replace an int value. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An int value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, long)" id="method-org.json.JSONArray.put-int-long">
        <title>put(int, long)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>long</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put or replace a long value. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A long value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, java.util.Map)" id="method-org.json.JSONArray.put-int-java.util.Map">
        <title>put(int, Map)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>Map</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a value in the JSONArray, where the value will be a JSONObject which is produced from a Map.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> The Map value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative or if the the value is an invalid number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(int, java.lang.Object)" id="method-org.json.JSONArray.put-int-java.lang.Object">
        <title>put(int, Object)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put or replace an object value in the JSONArray. If the index is greater than the length of the JSONArray, then null elements will be added as necessary to pad it out.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The subscript.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> The value to put into the array. The value should be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the index is negative or if the the value is an invalid number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(long)" id="method-org.json.JSONArray.put-long">
        <title>put(long)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>long</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Append an long value. This increases the array's length by one.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A long value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(java.util.Map)" id="method-org.json.JSONArray.put-java.util.Map">
        <title>put(Map)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>Map</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Put a value in the JSONArray, where the value will be a JSONObject which is produced from a Map.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A Map value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(java.lang.Object)" id="method-org.json.JSONArray.put-java.lang.Object">
        <title>put(Object)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>put</methodname>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
        </methodsynopsis>
        <para>Append an object value. This increases the array's length by one.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An object value. The value should be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="remove(int)" id="method-org.json.JSONArray.remove-int">
        <title>remove(int)<indexterm><primary>remove</primary></indexterm><indexterm><primary>Methods</primary><secondary>remove</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>remove</methodname>
          <methodparam><type>int</type><parameter>index</parameter></methodparam>
        </methodsynopsis>
        <para>Remove an index and close the hole.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>index</para></entry>
                <entry><para> The index of the element to be removed.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value that was associated with the index, or null if there was no value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toJSONObject(org.json.JSONArray)" id="method-org.json.JSONArray.toJSONObject-org.json.JSONArray">
        <title>toJSONObject(JSONArray)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONObject by combining a JSONArray of names with the values of this JSONArray.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray containing a list of key strings. These will be paired with the values.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject, or null if there are no names or if this JSONArray has no values.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If any of the names are null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString()" id="method-org.json.JSONArray.toString">
        <title>toString()<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <void/>
        </methodsynopsis>
        <para>Make a JSON text of this JSONArray. For compactness, no unnecessary whitespace is added. If it is not possible to produce a syntactically correct JSON text then null will be returned instead. This could occur if the array contains an invalid number. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a printable, displayable, transmittable representation of the array.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toString(int)" id="method-org.json.JSONArray.toString-int">
        <title>toString(int)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>int</type><parameter>indentFactor</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Make a prettyprinted JSON text of this JSONArray. Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>indentFactor</para></entry>
                <entry><para> The number of spaces to add to each level of indentation.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a printable, displayable, transmittable representation of the object, beginning with <literal>[</literal>Â (left bracket) and ending with <literal>]</literal>Â (right bracket).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="write(java.io.Writer)" id="method-org.json.JSONArray.write-java.io.Writer">
        <title>write(Writer)<indexterm><primary>write</primary></indexterm><indexterm><primary>Methods</primary><secondary>write</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Writer</type>
          <methodname>write</methodname>
          <methodparam><type>Writer</type><parameter>writer</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Write the contents of the JSONArray as JSON text to a writer. For compactness, no whitespace is added. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The writer.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONException" id="class-org.json.JSONException">
      <title>Exception JSONException</title>
      <indexterm><primary>JSONException</primary></indexterm>
      <indexterm><primary>Exceptions</primary><secondary>JSONException</secondary></indexterm>
      <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONException</classname>
          </ooclass>
          <ooclass>
            <classname>Exception</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONException</methodname>
            <methodparam><type>String</type><parameter>message</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONException</methodname>
            <methodparam><type>Throwable</type><parameter>cause</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Throwable</type>
            <methodname>getCause</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONException/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONException/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONException(java.lang.String)" id="constructor-org.json.JSONException-java.lang.String">
        <title>JSONException(String)<indexterm><primary>JSONException</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONException</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONException</methodname>
          <methodparam><type>String</type><parameter>message</parameter></methodparam>
        </constructorsynopsis>
        <para>Constructs a JSONException with an explanatory message.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>message</para></entry>
                <entry><para> Detail about the reason for the exception.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONML" id="class-org.json.JSONML">
      <title>Class JSONML</title>
      <indexterm><primary>JSONML</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONML</secondary></indexterm>
      <para>This provides static methods to convert an XML text into a JSONArray or JSONObject, and to covert a JSONArray or JSONObject into an XML text using the JsonML transform.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONML</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONML</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>XMLTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>XMLTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONML/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONML/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="toJSONArray(java.lang.String)" id="method-org.json.JSONML.toJSONArray-java.lang.String">
        <title>toJSONArray(String)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a well-formed (but not necessarily valid) XML string into a JSONArray using the JsonML transform. Each XML tag is represented as a JSONArray in which the first element is the tag name. If the tag has attributes, then the second element will be JSONObject containing the name/value pairs. If the tag contains children, then strings and JSONArrays will represent the child tags. Comments, prologs, DTDs, and <literal>&lt;[ [ ]]&gt;</literal> are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The source string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray containing the structured data from the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONArray(org.json.XMLTokener)" id="method-org.json.JSONML.toJSONArray-org.json.XMLTokener">
        <title>toJSONArray(XMLTokener)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>XMLTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a well-formed (but not necessarily valid) XML string into a JSONArray using the JsonML transform. Each XML tag is represented as a JSONArray in which the first element is the tag name. If the tag has attributes, then the second element will be JSONObject containing the name/value pairs. If the tag contains children, then strings and JSONArrays will represent the child content and tags. Comments, prologs, DTDs, and <literal>&lt;[ [ ]]&gt;</literal> are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> An XMLTokener.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray containing the structured data from the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONObject(java.lang.String)" id="method-org.json.JSONML.toJSONObject-java.lang.String">
        <title>toJSONObject(String)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a well-formed (but not necessarily valid) XML string into a JSONObject using the JsonML transform. Each XML tag is represented as a JSONObject with a "tagName" property. If the tag has attributes, then the attributes will be in the JSONObject as properties. If the tag contains children, the object will have a "childNodes" property which will be an array of strings and JsonML JSONObjects. Comments, prologs, DTDs, and <literal>&lt;[ [ ]]&gt;</literal> are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The XML source text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject containing the structured data from the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONObject(org.json.XMLTokener)" id="method-org.json.JSONML.toJSONObject-org.json.XMLTokener">
        <title>toJSONObject(XMLTokener)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>XMLTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a well-formed (but not necessarily valid) XML string into a JSONObject using the JsonML transform. Each XML tag is represented as a JSONObject with a "tagName" property. If the tag has attributes, then the attributes will be in the JSONObject as properties. If the tag contains children, the object will have a "childNodes" property which will be an array of strings and JsonML JSONObjects. Comments, prologs, DTDs, and <literal>&lt;[ [ ]]&gt;</literal> are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> An XMLTokener of the XML source text.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject containing the structured data from the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONArray)" id="method-org.json.JSONML.toString-org.json.JSONArray">
        <title>toString(JSONArray)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONArray</type><parameter>ja</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Reverse the JSONML transformation, making an XML text from a JSONArray.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>ja</para></entry>
                <entry><para> A JSONArray.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(org.json.JSONObject)" id="method-org.json.JSONML.toString-org.json.JSONObject">
        <title>toString(JSONObject)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Reverse the JSONML transformation, making an XML text from a JSONObject. The JSONObject must contain a "tagName" property. If it has children, then it must have a "childNodes" property containing an array of objects. The other properties are attributes with string values.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>jo</para></entry>
                <entry><para> A JSONObject.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONObject" id="class-org.json.JSONObject">
      <title>Class JSONObject</title>
      <indexterm><primary>JSONObject</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONObject</secondary></indexterm>
      <para>A JSONObject is an unordered collection of name/value pairs. Its external form is a string wrapped in curly braces with colons between the names and values, and commas between the values and names. The internal form is an object having <literal>get</literal> and <literal>opt</literal> methods for accessing the values by name, and <literal>put</literal> methods for adding or replacing values by name. The values can be any of these types: <literal>Boolean</literal>, <literal>JSONArray</literal>, <literal>JSONObject</literal>, <literal>Number</literal>, <literal>String</literal>, or the <literal>JSONObject.NULL</literal> object. A JSONObject constructor can be used to convert an external form JSON text into an internal form whose values can be retrieved with the <literal>get</literal> and <literal>opt</literal> methods, or to convert values into a JSON text using the <literal>put</literal> and <literal>toString</literal> methods. A <literal>get</literal> method returns a value if one can be found, and throws an exception if one cannot be found. An <literal>opt</literal> method returns a default value instead of throwing an exception, and so is useful for obtaining optional values. </para>
      <para> The generic <literal>get()</literal> and <literal>opt()</literal> methods return an object, which you can cast or query for type. There are also typed <literal>get</literal> and <literal>opt</literal> methods that do type checking and type coercion for you. The opt methods differ from the get methods in that they do not throw. Instead, they return a specified value, such as null. </para>
      <para> The <literal>put</literal> methods add or replace values in an object. For example, </para>
      <screen>myString = new JSONObject().put("JSON", "Hello, World!").toString();</screen>
      <para> produces the string <literal>{"JSON": "Hello, World"}</literal>.   The texts produced by the <literal>toString</literal> methods strictly conform to the JSON syntax rules. The constructors are more forgiving in the texts they will accept: </para>
      <itemizedlist><listitem>
          <para> An extra <literal>,</literal>Â (comma) may appear just before the closing brace.</para>
        </listitem>
<listitem>
          <para> Strings may be quoted with <literal/></para>
        </listitem>
</itemizedlist>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONObject</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Object</type>
            <varname>NULL</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <void/>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>Object</type><parameter>bean</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
            <methodparam><type>String[]</type><parameter>names</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>String</type><parameter>source</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>String</type><parameter>baseName</parameter></methodparam>
            <methodparam><type>Locale</type><parameter>locale</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>Map</type><parameter>map</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
            <methodparam><type>String[]</type><parameter>names</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONObject</methodname>
            <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>doubleToString</methodname>
            <methodparam><type>double</type><parameter>d</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String[]</type>
            <methodname>getNames</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String[]</type>
            <methodname>getNames</methodname>
            <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>numberToString</methodname>
            <methodparam><type>Number</type><parameter>number</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>quote</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>Object</type>
            <methodname>stringToValue</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>testValidity</methodname>
            <methodparam><type>Object</type><parameter>o</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>valueToString</methodname>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>Object</type>
            <methodname>wrap</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>accumulate</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>append</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>get</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>getBoolean</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>getDouble</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>getInt</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>getJSONArray</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>getJSONObject</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>getLong</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>getString</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>has</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>increment</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>isNull</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Iterator</type>
            <methodname>keys</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>length</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>names</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>opt</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>optBoolean</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>optBoolean</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>boolean</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>optDouble</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>double</type>
            <methodname>optDouble</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>double</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>optInt</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>int</type>
            <methodname>optInt</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>int</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>optJSONArray</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>optJSONObject</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>optLong</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>long</type>
            <methodname>optLong</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>long</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>optString</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>optString</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>String</type><parameter>defaultValue</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>double</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>int</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Map</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>put</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>long</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>putOnce</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONObject</type>
            <methodname>putOpt</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
            <methodparam><type>Object</type><parameter>value</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>remove</methodname>
            <methodparam><type>String</type><parameter>key</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Iterator</type>
            <methodname>sortedKeys</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONArray</type>
            <methodname>toJSONArray</methodname>
            <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>int</type><parameter>indentFactor</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Writer</type>
            <methodname>write</methodname>
            <methodparam><type>Writer</type><parameter>writer</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONObject/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONObject/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONObject()" id="constructor-org.json.JSONObject">
        <title>JSONObject()<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <void/>
        </constructorsynopsis>
        <para>Construct an empty JSONObject.</para>
      </sect2>
      <sect2 xreflabel="JSONObject(org.json.JSONObject, java.lang.String[])" id="constructor-org.json.JSONObject-org.json.JSONObject-java.lang.String_A">
        <title>JSONObject(JSONObject, String[])<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
          <methodparam><type>String[]</type><parameter>names</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONObject from a subset of another JSONObject. An array of strings is used to identify the keys that should be copied. Missing keys are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>jo</para></entry>
                <entry><para> A JSONObject.</para></entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> An array of strings.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If a value is a non-finite number or if a name is duplicated.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONObject(org.json.JSONTokener)" id="constructor-org.json.JSONObject-org.json.JSONTokener">
        <title>JSONObject(JSONTokener)<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>JSONTokener</type><parameter>x</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONObject from a JSONTokener.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>x</para></entry>
                <entry><para> A JSONTokener object containing the source string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is a syntax error in the source string or a duplicated key.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONObject(java.util.Map)" id="constructor-org.json.JSONObject-java.util.Map">
        <title>JSONObject(Map)<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>Map</type><parameter>map</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONObject from a Map.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>map</para></entry>
                <entry><para> A map object that can be used to initialize the contents of the JSONObject.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONObject(java.lang.Object)" id="constructor-org.json.JSONObject-java.lang.Object">
        <title>JSONObject(Object)<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>Object</type><parameter>bean</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONObject from an Object using bean getters. It reflects on all of the public methods of the object. For each of the methods with no parameters and a name starting with <literal>"get"</literal> or <literal>"is"</literal> followed by an uppercase letter, the method is invoked, and a key and the value returned from the getter method are put into the new JSONObject. The key is formed by removing the <literal>"get"</literal> or <literal>"is"</literal> prefix. If the second remaining character is not upper case, then the first character is converted to lower case. For example, if an object has a method named <literal>"getName"</literal>, and if the result of calling <literal>object.getName()</literal> is <literal>"Larry Fine"</literal>, then the JSONObject will contain <literal>"name": "Larry Fine"</literal>.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>bean</para></entry>
                <entry><para> An object that has getter methods that should be used to make a JSONObject.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="JSONObject(java.lang.Object, java.lang.String[])" id="constructor-org.json.JSONObject-java.lang.Object-java.lang.String_A">
        <title>JSONObject(Object, String[])<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          <methodparam><type>String[]</type><parameter>names</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONObject from an Object, using reflection to find the public members. The resulting JSONObject's keys will be the strings from the names array, and the values will be the field values associated with those keys in the object. If a key is not found or not visible, then it will not be copied into the new JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>object</para></entry>
                <entry><para> An object that has fields that should be used to make a JSONObject.</para></entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> An array of strings, the names of the fields to be obtained from the object.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="JSONObject(java.lang.String)" id="constructor-org.json.JSONObject-java.lang.String">
        <title>JSONObject(String)<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>String</type><parameter>source</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONObject from a source JSON text string. This is the most commonly used JSONObject constructor.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>source</para></entry>
                <entry><para> A string beginning with <literal>{</literal>Â (left brace) and ending with <literal>}</literal>Â (right brace).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is a syntax error in the source string or a duplicated key.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="JSONObject(java.lang.String, java.util.Locale)" id="constructor-org.json.JSONObject-java.lang.String-java.util.Locale">
        <title>JSONObject(String, Locale)<indexterm><primary>JSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONObject</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONObject</methodname>
          <methodparam><type>String</type><parameter>baseName</parameter></methodparam>
          <methodparam><type>Locale</type><parameter>locale</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONObject from a ResourceBundle.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>baseName</para></entry>
                <entry><para> The ResourceBundle base name.</para></entry>
              </row>
              <row>
                <entry><para>locale</para></entry>
                <entry><para> The Locale to load the ResourceBundle for.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If any JSONExceptions are detected.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="NULL" id="field-org.json.JSONObject.NULL">
        <title>NULL</title>
        <indexterm><primary>NULL</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>NULL</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Object</type>
          <varname>NULL</varname>
        </fieldsynopsis>
        <para>It is sometimes more convenient and less ambiguous to have a <literal>NULL</literal> object than to use Java's <literal>null</literal> value. <literal>JSONObject.NULL.equals(null)</literal> returns <literal>true</literal>. <literal>JSONObject.NULL.toString()</literal> returns <literal>"null"</literal>.</para>
      </sect2>
      <sect2 xreflabel="accumulate(java.lang.String, java.lang.Object)" id="method-org.json.JSONObject.accumulate-java.lang.String-java.lang.Object">
        <title>accumulate(String, Object)<indexterm><primary>accumulate</primary></indexterm><indexterm><primary>Methods</primary><secondary>accumulate</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>accumulate</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Accumulate values under a key. It is similar to the put method except that if there is already an object stored under the key then a JSONArray is stored under the key to hold all of the accumulated values. If there is already a JSONArray, then the new value is appended to it. In contrast, the put method replaces the previous value.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An object to be accumulated under the key.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the value is an invalid number or if the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="append(java.lang.String, java.lang.Object)" id="method-org.json.JSONObject.append-java.lang.String-java.lang.Object">
        <title>append(String, Object)<indexterm><primary>append</primary></indexterm><indexterm><primary>Methods</primary><secondary>append</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>append</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append values to the array under a key. If the key does not exist in the JSONObject, then the key is put in the JSONObject with its value being a JSONArray containing the value parameter. If the key was already associated with a JSONArray, then the value parameter is appended to it.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An object to be accumulated under the key.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is null or if the current value associated with the key is not a JSONArray.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="doubleToString(double)" id="method-org.json.JSONObject.doubleToString-double">
        <title>doubleToString(double)<indexterm><primary>doubleToString</primary></indexterm><indexterm><primary>Methods</primary><secondary>doubleToString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>doubleToString</methodname>
          <methodparam><type>double</type><parameter>d</parameter></methodparam>
        </methodsynopsis>
        <para>Produce a string from a double. The string "null" will be returned if the number is not finite.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>d</para></entry>
                <entry><para> A double.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="get(java.lang.String)" id="method-org.json.JSONObject.get-java.lang.String">
        <title>get(String)<indexterm><primary>get</primary></indexterm><indexterm><primary>Methods</primary><secondary>get</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>get</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the value object associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The object associated with the key.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getBoolean(java.lang.String)" id="method-org.json.JSONObject.getBoolean-java.lang.String">
        <title>getBoolean(String)<indexterm><primary>getBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>getBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>getBoolean</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the boolean value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the value is not a Boolean or the String "true" or "false".</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getDouble(java.lang.String)" id="method-org.json.JSONObject.getDouble-java.lang.String">
        <title>getDouble(String)<indexterm><primary>getDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>getDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>getDouble</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the double value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The numeric value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found or if the value is not a Number object and cannot be converted to a number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getInt(java.lang.String)" id="method-org.json.JSONObject.getInt-java.lang.String">
        <title>getInt(String)<indexterm><primary>getInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>getInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>getInt</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the int value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The integer value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found or if the value cannot be converted to an integer.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getJSONArray(java.lang.String)" id="method-org.json.JSONObject.getJSONArray-java.lang.String">
        <title>getJSONArray(String)<indexterm><primary>getJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>getJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>getJSONArray</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the JSONArray value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found or if the value is not a JSONArray.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getJSONObject(java.lang.String)" id="method-org.json.JSONObject.getJSONObject-java.lang.String">
        <title>getJSONObject(String)<indexterm><primary>getJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>getJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>getJSONObject</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the JSONObject value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found or if the value is not a JSONObject.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getLong(java.lang.String)" id="method-org.json.JSONObject.getLong-java.lang.String">
        <title>getLong(String)<indexterm><primary>getLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>getLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>getLong</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the long value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The long value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found or if the value cannot be converted to a long.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="getNames(org.json.JSONObject)" id="method-org.json.JSONObject.getNames-org.json.JSONObject">
        <title>getNames(JSONObject)<indexterm><primary>getNames</primary></indexterm><indexterm><primary>Methods</primary><secondary>getNames</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String[]</type>
          <methodname>getNames</methodname>
          <methodparam><type>JSONObject</type><parameter>jo</parameter></methodparam>
        </methodsynopsis>
        <para>Get an array of field names from a JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An array of field names, or null if there are no names.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getNames(java.lang.Object)" id="method-org.json.JSONObject.getNames-java.lang.Object">
        <title>getNames(Object)<indexterm><primary>getNames</primary></indexterm><indexterm><primary>Methods</primary><secondary>getNames</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String[]</type>
          <methodname>getNames</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
        </methodsynopsis>
        <para>Get an array of field names from an Object.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An array of field names, or null if there are no names.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="getString(java.lang.String)" id="method-org.json.JSONObject.getString-java.lang.String">
        <title>getString(String)<indexterm><primary>getString</primary></indexterm><indexterm><primary>Methods</primary><secondary>getString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>getString</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the string associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is not found.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="has(java.lang.String)" id="method-org.json.JSONObject.has-java.lang.String">
        <title>has(String)<indexterm><primary>has</primary></indexterm><indexterm><primary>Methods</primary><secondary>has</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>has</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Determine if the JSONObject contains a specific key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> true if the key exists in the JSONObject.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="increment(java.lang.String)" id="method-org.json.JSONObject.increment-java.lang.String">
        <title>increment(String)<indexterm><primary>increment</primary></indexterm><indexterm><primary>Methods</primary><secondary>increment</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>increment</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Increment a property of a JSONObject. If there is no such property, create one with a value of 1. If there is such a property, and if it is an Integer, Long, Double, or Float, then add one to it.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If there is already a property with this name that is not an Integer, Long, Double, or Float.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="isNull(java.lang.String)" id="method-org.json.JSONObject.isNull-java.lang.String">
        <title>isNull(String)<indexterm><primary>isNull</primary></indexterm><indexterm><primary>Methods</primary><secondary>isNull</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>isNull</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Determine if the value associated with the key is null or if there is no value.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> true if there is no value associated with the key or if the value is the JSONObject.NULL object.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="keys()" id="method-org.json.JSONObject.keys">
        <title>keys()<indexterm><primary>keys</primary></indexterm><indexterm><primary>Methods</primary><secondary>keys</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Iterator</type>
          <methodname>keys</methodname>
          <void/>
        </methodsynopsis>
        <para>Get an enumeration of the keys of the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An iterator of the keys.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="length()" id="method-org.json.JSONObject.length">
        <title>length()<indexterm><primary>length</primary></indexterm><indexterm><primary>Methods</primary><secondary>length</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>length</methodname>
          <void/>
        </methodsynopsis>
        <para>Get the number of keys stored in the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The number of keys in the JSONObject.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="names()" id="method-org.json.JSONObject.names">
        <title>names()<indexterm><primary>names</primary></indexterm><indexterm><primary>Methods</primary><secondary>names</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>names</methodname>
          <void/>
        </methodsynopsis>
        <para>Produce a JSONArray containing the names of the elements of this JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray containing the key strings, or null if the JSONObject is empty.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="numberToString(java.lang.Number)" id="method-org.json.JSONObject.numberToString-java.lang.Number">
        <title>numberToString(Number)<indexterm><primary>numberToString</primary></indexterm><indexterm><primary>Methods</primary><secondary>numberToString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>numberToString</methodname>
          <methodparam><type>Number</type><parameter>number</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a string from a Number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>number</para></entry>
                <entry><para> A Number</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If n is a non-finite number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="opt(java.lang.String)" id="method-org.json.JSONObject.opt-java.lang.String">
        <title>opt(String)<indexterm><primary>opt</primary></indexterm><indexterm><primary>Methods</primary><secondary>opt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>opt</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional value associated with a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value, or null if there is no value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optBoolean(java.lang.String)" id="method-org.json.JSONObject.optBoolean-java.lang.String">
        <title>optBoolean(String)<indexterm><primary>optBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>optBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>optBoolean</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional boolean associated with a key. It returns false if there is no such key, or if the value is not Boolean.TRUE or the String "true".</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optBoolean(java.lang.String, boolean)" id="method-org.json.JSONObject.optBoolean-java.lang.String-boolean">
        <title>optBoolean(String, boolean)<indexterm><primary>optBoolean</primary></indexterm><indexterm><primary>Methods</primary><secondary>optBoolean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>optBoolean</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>boolean</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional boolean associated with a key. It returns the defaultValue if there is no such key, or if it is not a Boolean or the String "true" or "false" (case insensitive).</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The truth.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optDouble(java.lang.String)" id="method-org.json.JSONObject.optDouble-java.lang.String">
        <title>optDouble(String)<indexterm><primary>optDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>optDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>optDouble</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional double associated with a key, or NaN if there is no such key or if its value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A string which is the key.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optDouble(java.lang.String, double)" id="method-org.json.JSONObject.optDouble-java.lang.String-double">
        <title>optDouble(String, double)<indexterm><primary>optDouble</primary></indexterm><indexterm><primary>Methods</primary><secondary>optDouble</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>double</type>
          <methodname>optDouble</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>double</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional double associated with a key, or the defaultValue if there is no such key or if its value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optInt(java.lang.String)" id="method-org.json.JSONObject.optInt-java.lang.String">
        <title>optInt(String)<indexterm><primary>optInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>optInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>optInt</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional int value associated with a key, or zero if there is no such key or if the value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optInt(java.lang.String, int)" id="method-org.json.JSONObject.optInt-java.lang.String-int">
        <title>optInt(String, int)<indexterm><primary>optInt</primary></indexterm><indexterm><primary>Methods</primary><secondary>optInt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>int</type>
          <methodname>optInt</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>int</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional int value associated with a key, or the default if there is no such key or if the value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optJSONArray(java.lang.String)" id="method-org.json.JSONObject.optJSONArray-java.lang.String">
        <title>optJSONArray(String)<indexterm><primary>optJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>optJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>optJSONArray</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional JSONArray associated with a key. It returns null if there is no such key, or if its value is not a JSONArray.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optJSONObject(java.lang.String)" id="method-org.json.JSONObject.optJSONObject-java.lang.String">
        <title>optJSONObject(String)<indexterm><primary>optJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>optJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>optJSONObject</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional JSONObject associated with a key. It returns null if there is no such key, or if its value is not a JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optLong(java.lang.String)" id="method-org.json.JSONObject.optLong-java.lang.String">
        <title>optLong(String)<indexterm><primary>optLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>optLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>optLong</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional long value associated with a key, or zero if there is no such key or if the value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optLong(java.lang.String, long)" id="method-org.json.JSONObject.optLong-java.lang.String-long">
        <title>optLong(String, long)<indexterm><primary>optLong</primary></indexterm><indexterm><primary>Methods</primary><secondary>optLong</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>long</type>
          <methodname>optLong</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>long</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional long value associated with a key, or the default if there is no such key or if the value is not a number. If the value is a string, an attempt will be made to evaluate it as a number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optString(java.lang.String)" id="method-org.json.JSONObject.optString-java.lang.String">
        <title>optString(String)<indexterm><primary>optString</primary></indexterm><indexterm><primary>Methods</primary><secondary>optString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>optString</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional string associated with a key. It returns an empty string if there is no such key. If the value is not a string and is not null, then it is converted to a string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="optString(java.lang.String, java.lang.String)" id="method-org.json.JSONObject.optString-java.lang.String-java.lang.String">
        <title>optString(String, String)<indexterm><primary>optString</primary></indexterm><indexterm><primary>Methods</primary><secondary>optString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>optString</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>String</type><parameter>defaultValue</parameter></methodparam>
        </methodsynopsis>
        <para>Get an optional string associated with a key. It returns the defaultValue if there is no such key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>defaultValue</para></entry>
                <entry><para> The default.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string which is the value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, boolean)" id="method-org.json.JSONObject.put-java.lang.String-boolean">
        <title>put(String, boolean)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>boolean</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/boolean pair in the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A boolean which is the value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, java.util.Collection)" id="method-org.json.JSONObject.put-java.lang.String-java.util.Collection">
        <title>put(String, Collection)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Collection</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/value pair in the JSONObject, where the value will be a JSONArray which is produced from a Collection.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A Collection value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, double)" id="method-org.json.JSONObject.put-java.lang.String-double">
        <title>put(String, double)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>double</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/double pair in the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A double which is the value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is null or if the number is invalid.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, int)" id="method-org.json.JSONObject.put-java.lang.String-int">
        <title>put(String, int)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>int</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/int pair in the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An int which is the value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, long)" id="method-org.json.JSONObject.put-java.lang.String-long">
        <title>put(String, long)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>long</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/long pair in the JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A long which is the value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, java.util.Map)" id="method-org.json.JSONObject.put-java.lang.String-java.util.Map">
        <title>put(String, Map)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Map</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/value pair in the JSONObject, where the value will be a JSONObject which is produced from a Map.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> A Map value.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="put(java.lang.String, java.lang.Object)" id="method-org.json.JSONObject.put-java.lang.String-java.lang.Object">
        <title>put(String, Object)<indexterm><primary>put</primary></indexterm><indexterm><primary>Methods</primary><secondary>put</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>put</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/value pair in the JSONObject. If the value is null, then the key will be removed from the JSONObject if it is present.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An object which is the value. It should be of one of these types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String, or the JSONObject.NULL object.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the value is non-finite number or if the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="putOnce(java.lang.String, java.lang.Object)" id="method-org.json.JSONObject.putOnce-java.lang.String-java.lang.Object">
        <title>putOnce(String, Object)<indexterm><primary>putOnce</primary></indexterm><indexterm><primary>Methods</primary><secondary>putOnce</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>putOnce</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/value pair in the JSONObject, but only if the key and the value are both non-null, and only if there is not already a member with that name.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para/></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para/></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> his.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the key is a duplicate</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="putOpt(java.lang.String, java.lang.Object)" id="method-org.json.JSONObject.putOpt-java.lang.String-java.lang.Object">
        <title>putOpt(String, Object)<indexterm><primary>putOpt</primary></indexterm><indexterm><primary>Methods</primary><secondary>putOpt</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONObject</type>
          <methodname>putOpt</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Put a key/value pair in the JSONObject, but only if the key and the value are both non-null.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> An object which is the value. It should be of one of these types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String, or the JSONObject.NULL object.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the value is a non-finite number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="quote(java.lang.String)" id="method-org.json.JSONObject.quote-java.lang.String">
        <title>quote(String)<indexterm><primary>quote</primary></indexterm><indexterm><primary>Methods</primary><secondary>quote</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>quote</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A String</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String correctly formatted for insertion in a JSON text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="remove(java.lang.String)" id="method-org.json.JSONObject.remove-java.lang.String">
        <title>remove(String)<indexterm><primary>remove</primary></indexterm><indexterm><primary>Methods</primary><secondary>remove</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>remove</methodname>
          <methodparam><type>String</type><parameter>key</parameter></methodparam>
        </methodsynopsis>
        <para>Remove a name and its value, if present.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>key</para></entry>
                <entry><para> The name to be removed.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The value that was associated with the name, or null if there was no value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="sortedKeys()" id="method-org.json.JSONObject.sortedKeys">
        <title>sortedKeys()<indexterm><primary>sortedKeys</primary></indexterm><indexterm><primary>Methods</primary><secondary>sortedKeys</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Iterator</type>
          <methodname>sortedKeys</methodname>
          <void/>
        </methodsynopsis>
        <para>Get an enumeration of the keys of the JSONObject. The keys will be sorted alphabetically.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An iterator of the keys.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="stringToValue(java.lang.String)" id="method-org.json.JSONObject.stringToValue-java.lang.String">
        <title>stringToValue(String)<indexterm><primary>stringToValue</primary></indexterm><indexterm><primary>Methods</primary><secondary>stringToValue</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>Object</type>
          <methodname>stringToValue</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <para>Try to convert a string into a number, boolean, or null. If the string can't be converted, return the string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A String.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A simple JSON value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="testValidity(java.lang.Object)" id="method-org.json.JSONObject.testValidity-java.lang.Object">
        <title>testValidity(Object)<indexterm><primary>testValidity</primary></indexterm><indexterm><primary>Methods</primary><secondary>testValidity</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>testValidity</methodname>
          <methodparam><type>Object</type><parameter>o</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Throw an exception if the object is a NaN or infinite number.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>o</para></entry>
                <entry><para> The object to test.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If o is a non-finite number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toJSONArray(org.json.JSONArray)" id="method-org.json.JSONObject.toJSONArray-org.json.JSONArray">
        <title>toJSONArray(JSONArray)<indexterm><primary>toJSONArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONArray</type>
          <methodname>toJSONArray</methodname>
          <methodparam><type>JSONArray</type><parameter>names</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Produce a JSONArray containing the values of the members of this JSONObject.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>names</para></entry>
                <entry><para> A JSONArray containing a list of key strings. This determines the sequence of the values in the result.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONArray of values.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If any of the values are non-finite numbers.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString()" id="method-org.json.JSONObject.toString">
        <title>toString()<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <void/>
        </methodsynopsis>
        <para>Make a JSON text of this JSONObject. For compactness, no whitespace is added. If this would not result in a syntactically correct JSON text, then null will be returned instead. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a printable, displayable, portable, transmittable representation of the object, beginning with <literal>{</literal>Â (left brace) and ending with <literal>}</literal>Â (right brace).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toString(int)" id="method-org.json.JSONObject.toString-int">
        <title>toString(int)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>int</type><parameter>indentFactor</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Make a prettyprinted JSON text of this JSONObject. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>indentFactor</para></entry>
                <entry><para> The number of spaces to add to each level of indentation.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a printable, displayable, portable, transmittable representation of the object, beginning with <literal>{</literal>Â (left brace) and ending with <literal>}</literal>Â (right brace).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the object contains an invalid number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="valueToString(java.lang.Object)" id="method-org.json.JSONObject.valueToString-java.lang.Object">
        <title>valueToString(Object)<indexterm><primary>valueToString</primary></indexterm><indexterm><primary>Methods</primary><secondary>valueToString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>valueToString</methodname>
          <methodparam><type>Object</type><parameter>value</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Make a JSON text of an Object value. If the object has an value.toJSONString() method, then that method will be used to produce the JSON text. The method is required to produce a strictly conforming text. If the object does not contain a toJSONString method (which is the most common case), then a text will be produced by other means. If the value is an array or Collection, then a JSONArray will be made from it and its toJSONString method will be called. If the value is a MAP, then a JSONObject will be made from it and its toJSONString method will be called. Otherwise, the value's toString method will be called, and the result will be quoted. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>value</para></entry>
                <entry><para> The value to be serialized.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a printable, displayable, transmittable representation of the object, beginning with <literal>{</literal>Â (left brace) and ending with <literal>}</literal>Â (right brace).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the value is or contains an invalid number.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="wrap(java.lang.Object)" id="method-org.json.JSONObject.wrap-java.lang.Object">
        <title>wrap(Object)<indexterm><primary>wrap</primary></indexterm><indexterm><primary>Methods</primary><secondary>wrap</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>Object</type>
          <methodname>wrap</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
        </methodsynopsis>
        <para>Wrap an object, if necessary. If the object is null, return the NULL object. If it is an array or collection, wrap it in a JSONArray. If it is a map, wrap it in a JSONObject. If it is a standard property (Double, String, et al) then it is already wrapped. Otherwise, if it comes from one of the java packages, turn it into a string. And if it doesn't, try to wrap it in a JSONObject. If the wrapping fails, then null is returned.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>object</para></entry>
                <entry><para> The object to wrap</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The wrapped value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="write(java.io.Writer)" id="method-org.json.JSONObject.write-java.io.Writer">
        <title>write(Writer)<indexterm><primary>write</primary></indexterm><indexterm><primary>Methods</primary><secondary>write</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Writer</type>
          <methodname>write</methodname>
          <methodparam><type>Writer</type><parameter>writer</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Write the contents of the JSONObject as JSON text to a writer. For compactness, no whitespace is added. </para>
        <para> Warning: This method assumes that the data structure is acyclical.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The writer.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONString" id="class-org.json.JSONString">
      <title>Interface JSONString</title>
      <indexterm><primary>JSONString</primary></indexterm>
      <indexterm><primary>Interfaces</primary><secondary>JSONString</secondary></indexterm>
      <para>The <literal>JSONString</literal> interface allows a <literal>toJSONString()</literal> method so that a class can change the behavior of <literal>JSONObject.toString()</literal>, <literal>JSONArray.toString()</literal>, and <literal>JSONWriter.value(</literal>Object<literal>)</literal>. The <literal>toJSONString</literal> method will be used instead of the default behavior of using the Object's <literal>toString()</literal> method and quoting the result.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="interface" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>interface</modifier>
            <classname>JSONString</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toJSONString</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONString/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONString/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="toJSONString()" id="method-org.json.JSONString.toJSONString">
        <title>toJSONString()<indexterm><primary>toJSONString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toJSONString</methodname>
          <void/>
        </methodsynopsis>
        <para>The <literal>toJSONString</literal> method allows a class to produce its own JSON serialization.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A strictly syntactically correct JSON text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONStringer" id="class-org.json.JSONStringer">
      <title>Class JSONStringer</title>
      <indexterm><primary>JSONStringer</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONStringer</secondary></indexterm>
      <para>JSONStringer provides a quick and convenient way of producing JSON text. The texts produced strictly conform to JSON syntax rules. No whitespace is added, so the results are ready for transmission or storage. Each instance of JSONStringer can produce one JSON text. </para>
      <para> A JSONStringer instance provides a <literal>value</literal> method for appending values to the text, and a <literal>key</literal> method for adding keys before values in objects. There are <literal>array</literal> and <literal>endArray</literal> methods that make and bound array values, and <literal>object</literal> and <literal>endObject</literal> methods which make and bound object values. All of these methods return the JSONWriter instance, permitting cascade style. For example, </para>
      <screen>
 myString = new JSONStringer()
     .object()
         .key("JSON")
         .value("Hello, World!")
     .endObject()
     .toString();</screen>
      <para> which produces the string <screen>
 {"JSON":"Hello, World!"}</screen>  The first method called must be <literal>array</literal> or <literal>object</literal>. There are no methods for adding commas or colons. JSONStringer adds them for you. Objects and arrays can be nested up to 20 levels deep. </para>
      <para> This can sometimes be easier than using a JSONObject to build a string.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONStringer</classname>
          </ooclass>
          <ooclass>
            <classname>JSONWriter</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONStringer</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONStringer/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONStringer/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONStringer()" id="constructor-org.json.JSONStringer">
        <title>JSONStringer()<indexterm><primary>JSONStringer</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONStringer</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONStringer</methodname>
          <void/>
        </constructorsynopsis>
        <para>Make a fresh JSONStringer. It can be used to build one JSON text.</para>
      </sect2>
      <sect2 xreflabel="toString()" id="method-org.json.JSONStringer.toString">
        <title>toString()<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <void/>
        </methodsynopsis>
        <para>Return the JSON text. This method is used to obtain the product of the JSONStringer instance. It will return <literal>null</literal> if there was a problem in the construction of the JSON text (such as the calls to <literal>array</literal> were not properly balanced with calls to <literal>endArray</literal>).</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The JSON text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONTokener" id="class-org.json.JSONTokener">
      <title>Class JSONTokener</title>
      <indexterm><primary>JSONTokener</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONTokener</secondary></indexterm>
      <para>A JSONTokener takes a source string and extracts characters and tokens from it. It is used by the JSONObject and JSONArray constructors to parse JSON source strings.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONTokener</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONTokener</methodname>
            <methodparam><type>InputStream</type><parameter>inputStream</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONTokener</methodname>
            <methodparam><type>Reader</type><parameter>reader</parameter></methodparam>
          </constructorsynopsis>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONTokener</methodname>
            <methodparam><type>String</type><parameter>s</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>int</type>
            <methodname>dehexchar</methodname>
            <methodparam><type>char</type><parameter>c</parameter></methodparam>
          </methodsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>void</type>
            <methodname>back</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>end</methodname>
            <void/>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>more</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>char</type>
            <methodname>next</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>char</type>
            <methodname>next</methodname>
            <methodparam><type>char</type><parameter>c</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>next</methodname>
            <methodparam><type>int</type><parameter>n</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>char</type>
            <methodname>nextClean</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>nextString</methodname>
            <methodparam><type>char</type><parameter>quote</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>nextTo</methodname>
            <methodparam><type>char</type><parameter>delimiter</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>nextTo</methodname>
            <methodparam><type>String</type><parameter>delimiters</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>nextValue</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>char</type>
            <methodname>skipTo</methodname>
            <methodparam><type>char</type><parameter>to</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONException</type>
            <methodname>syntaxError</methodname>
            <methodparam><type>String</type><parameter>message</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <void/>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-org.json.HTTPTokener"><varname>org.Â­json.Â­HTTPTokener</varname></link></member><member><link linkend="class-org.json.XMLTokener"><varname>org.Â­json.Â­XMLTokener</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONTokener/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONTokener/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONTokener(java.io.InputStream)" id="constructor-org.json.JSONTokener-java.io.InputStream">
        <title>JSONTokener(InputStream)<indexterm><primary>JSONTokener</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONTokener</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONTokener</methodname>
          <methodparam><type>InputStream</type><parameter>inputStream</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </constructorsynopsis>
        <para>Construct a JSONTokener from an InputStream.</para>
      </sect2>
      <sect2 xreflabel="JSONTokener(java.io.Reader)" id="constructor-org.json.JSONTokener-java.io.Reader">
        <title>JSONTokener(Reader)<indexterm><primary>JSONTokener</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONTokener</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONTokener</methodname>
          <methodparam><type>Reader</type><parameter>reader</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONTokener from a Reader.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>reader</para></entry>
                <entry><para> A reader.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="JSONTokener(java.lang.String)" id="constructor-org.json.JSONTokener-java.lang.String">
        <title>JSONTokener(String)<indexterm><primary>JSONTokener</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONTokener</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONTokener</methodname>
          <methodparam><type>String</type><parameter>s</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct a JSONTokener from a string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>s</para></entry>
                <entry><para> A source string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="back()" id="method-org.json.JSONTokener.back">
        <title>back()<indexterm><primary>back</primary></indexterm><indexterm><primary>Methods</primary><secondary>back</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>void</type>
          <methodname>back</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Back up one character. This provides a sort of lookahead capability, so that you can test for a digit or letter before attempting to parse the next number or identifier.</para>
      </sect2>
      <sect2 xreflabel="dehexchar(char)" id="method-org.json.JSONTokener.dehexchar-char">
        <title>dehexchar(char)<indexterm><primary>dehexchar</primary></indexterm><indexterm><primary>Methods</primary><secondary>dehexchar</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>int</type>
          <methodname>dehexchar</methodname>
          <methodparam><type>char</type><parameter>c</parameter></methodparam>
        </methodsynopsis>
        <para>Get the hex value of a character (base16).</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>c</para></entry>
                <entry><para> A character between '0' and '9' or between 'A' and 'F' or between 'a' and 'f'.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An int between 0 and 15, or -1 if c was not a hex digit.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="more()" id="method-org.json.JSONTokener.more">
        <title>more()<indexterm><primary>more</primary></indexterm><indexterm><primary>Methods</primary><secondary>more</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>more</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Determine if the source string still contains characters that next() can consume.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> true if not yet at the end of the source.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="next()" id="method-org.json.JSONTokener.next">
        <title>next()<indexterm><primary>next</primary></indexterm><indexterm><primary>Methods</primary><secondary>next</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>char</type>
          <methodname>next</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next character in the source string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The next character, or 0 if past the end of the source string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="next(char)" id="method-org.json.JSONTokener.next-char">
        <title>next(char)<indexterm><primary>next</primary></indexterm><indexterm><primary>Methods</primary><secondary>next</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>char</type>
          <methodname>next</methodname>
          <methodparam><type>char</type><parameter>c</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Consume the next character, and check that it matches a specified character.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>c</para></entry>
                <entry><para> The character to match.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The character.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>if the character does not match.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="next(int)" id="method-org.json.JSONTokener.next-int">
        <title>next(int)<indexterm><primary>next</primary></indexterm><indexterm><primary>Methods</primary><secondary>next</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>next</methodname>
          <methodparam><type>int</type><parameter>n</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next n characters.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>n</para></entry>
                <entry><para> The number of characters to take.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string of n characters.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>Substring bounds error if there are not n characters remaining in the source string.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextClean()" id="method-org.json.JSONTokener.nextClean">
        <title>nextClean()<indexterm><primary>nextClean</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextClean</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>char</type>
          <methodname>nextClean</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next char in the string, skipping whitespace.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A character, or 0 if there are no more characters.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextString(char)" id="method-org.json.JSONTokener.nextString-char">
        <title>nextString(char)<indexterm><primary>nextString</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>nextString</methodname>
          <methodparam><type>char</type><parameter>quote</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Return the characters up to the next close quote character. Backslash processing is done. The formal JSON format does not allow strings in single quotes, but an implementation is allowed to accept them.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>quote</para></entry>
                <entry><para> The quoting character, either <literal/></para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A String.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>Unterminated string.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextTo(char)" id="method-org.json.JSONTokener.nextTo-char">
        <title>nextTo(char)<indexterm><primary>nextTo</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextTo</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>nextTo</methodname>
          <methodparam><type>char</type><parameter>delimiter</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the text up but not including the specified character or the end of line, whichever comes first.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>delimiter</para></entry>
                <entry><para> A delimiter character.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="nextTo(java.lang.String)" id="method-org.json.JSONTokener.nextTo-java.lang.String">
        <title>nextTo(String)<indexterm><primary>nextTo</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextTo</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>nextTo</methodname>
          <methodparam><type>String</type><parameter>delimiters</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the text up but not including one of the specified delimiter characters or the end of line, whichever comes first.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>delimiters</para></entry>
                <entry><para> A set of delimiter characters.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string, trimmed.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="nextValue()" id="method-org.json.JSONTokener.nextValue">
        <title>nextValue()<indexterm><primary>nextValue</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextValue</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>nextValue</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next value. The value can be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> An object.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If syntax error.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="skipTo(char)" id="method-org.json.JSONTokener.skipTo-char">
        <title>skipTo(char)<indexterm><primary>skipTo</primary></indexterm><indexterm><primary>Methods</primary><secondary>skipTo</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>char</type>
          <methodname>skipTo</methodname>
          <methodparam><type>char</type><parameter>to</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Skip characters until the next character is the requested character. If the requested character is not found, no characters are skipped.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>to</para></entry>
                <entry><para> A character to skip to.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The requested character, or zero if the requested character is not found.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="syntaxError(java.lang.String)" id="method-org.json.JSONTokener.syntaxError-java.lang.String">
        <title>syntaxError(String)<indexterm><primary>syntaxError</primary></indexterm><indexterm><primary>Methods</primary><secondary>syntaxError</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONException</type>
          <methodname>syntaxError</methodname>
          <methodparam><type>String</type><parameter>message</parameter></methodparam>
        </methodsynopsis>
        <para>Make a JSONException to signal a syntax error.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>message</para></entry>
                <entry><para> The error message.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONException object, suitable for throwing</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toString()" id="method-org.json.JSONTokener.toString">
        <title>toString()<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <void/>
        </methodsynopsis>
        <para>Make a printable string of this JSONTokener.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> " at {index} [character {character} line {line}]"</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.JSONWriter" id="class-org.json.JSONWriter">
      <title>Class JSONWriter</title>
      <indexterm><primary>JSONWriter</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>JSONWriter</secondary></indexterm>
      <para>JSONWriter provides a quick and convenient way of producing JSON text. The texts produced strictly conform to JSON syntax rules. No whitespace is added, so the results are ready for transmission or storage. Each instance of JSONWriter can produce one JSON text. </para>
      <para> A JSONWriter instance provides a <literal>value</literal> method for appending values to the text, and a <literal>key</literal> method for adding keys before values in objects. There are <literal>array</literal> and <literal>endArray</literal> methods that make and bound array values, and <literal>object</literal> and <literal>endObject</literal> methods which make and bound object values. All of these methods return the JSONWriter instance, permitting a cascade style. For example, </para>
      <screen>
 new JSONWriter(myWriter)
     .object()
         .key("JSON")
         .value("Hello, World!")
     .endObject();</screen>
      <para> which writes <screen>
 {"JSON":"Hello, World!"}</screen>  The first method called must be <literal>array</literal> or <literal>object</literal>. There are no methods for adding commas or colons. JSONWriter adds them for you. Objects and arrays can be nested up to 20 levels deep. </para>
      <para> This can sometimes be easier than using a JSONObject to build a string.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>JSONWriter</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>JSONWriter</methodname>
            <methodparam><type>Writer</type><parameter>w</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>array</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>endArray</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>endObject</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>key</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>object</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>value</methodname>
            <methodparam><type>boolean</type><parameter>b</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>value</methodname>
            <methodparam><type>double</type><parameter>d</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>value</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>JSONWriter</type>
            <methodname>value</methodname>
            <methodparam><type>long</type><parameter>l</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <para><emphasis role="bold">Direct known subclasses</emphasis>: <simplelist type="inline"><member><link linkend="class-org.json.JSONStringer"><varname>org.Â­json.Â­JSONStringer</varname></link></member></simplelist></para>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/JSONWriter/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/JSONWriter/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="JSONWriter(java.io.Writer)" id="constructor-org.json.JSONWriter-java.io.Writer">
        <title>JSONWriter(Writer)<indexterm><primary>JSONWriter</primary></indexterm><indexterm><primary>Methods</primary><secondary>JSONWriter</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>JSONWriter</methodname>
          <methodparam><type>Writer</type><parameter>w</parameter></methodparam>
        </constructorsynopsis>
        <para>Make a fresh JSONWriter. It can be used to build one JSON text.</para>
      </sect2>
      <sect2 xreflabel="array()" id="method-org.json.JSONWriter.array">
        <title>array()<indexterm><primary>array</primary></indexterm><indexterm><primary>Methods</primary><secondary>array</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>array</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Begin appending a new array. All values until the balancing <literal>endArray</literal> will be appended to this array. The <literal>endArray</literal> method must be called to mark the array's end.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the nesting is too deep, or if the object is started in the wrong place (for example as a key or after the end of the outermost array or object).</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="endArray()" id="method-org.json.JSONWriter.endArray">
        <title>endArray()<indexterm><primary>endArray</primary></indexterm><indexterm><primary>Methods</primary><secondary>endArray</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>endArray</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>End an array. This method most be called to balance calls to <literal>array</literal>.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If incorrectly nested.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="endObject()" id="method-org.json.JSONWriter.endObject">
        <title>endObject()<indexterm><primary>endObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>endObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>endObject</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>End an object. This method most be called to balance calls to <literal>object</literal>.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If incorrectly nested.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="key(java.lang.String)" id="method-org.json.JSONWriter.key-java.lang.String">
        <title>key(String)<indexterm><primary>key</primary></indexterm><indexterm><primary>Methods</primary><secondary>key</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>key</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append a key. The key will be associated with the next value. In an object, every value must be preceded by a key.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A key string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the key is out of place. For example, keys do not belong in arrays or if the key is null.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="object()" id="method-org.json.JSONWriter.object">
        <title>object()<indexterm><primary>object</primary></indexterm><indexterm><primary>Methods</primary><secondary>object</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>object</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Begin appending a new object. All keys and values until the balancing <literal>endObject</literal> will be appended to this object. The <literal>endObject</literal> method must be called to mark the object's end.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the nesting is too deep, or if the object is started in the wrong place (for example as a key or after the end of the outermost array or object).</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="value(boolean)" id="method-org.json.JSONWriter.value-boolean">
        <title>value(boolean)<indexterm><primary>value</primary></indexterm><indexterm><primary>Methods</primary><secondary>value</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>value</methodname>
          <methodparam><type>boolean</type><parameter>b</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append either the value <literal>true</literal> or the value <literal>false</literal>.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>b</para></entry>
                <entry><para> A boolean.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="value(double)" id="method-org.json.JSONWriter.value-double">
        <title>value(double)<indexterm><primary>value</primary></indexterm><indexterm><primary>Methods</primary><secondary>value</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>value</methodname>
          <methodparam><type>double</type><parameter>d</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append a double value.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>d</para></entry>
                <entry><para> A double.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the number is not finite.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="value(long)" id="method-org.json.JSONWriter.value-long">
        <title>value(long)<indexterm><primary>value</primary></indexterm><indexterm><primary>Methods</primary><secondary>value</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>value</methodname>
          <methodparam><type>long</type><parameter>l</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append a long value.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>l</para></entry>
                <entry><para> A long.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="value(java.lang.Object)" id="method-org.json.JSONWriter.value-java.lang.Object">
        <title>value(Object)<indexterm><primary>value</primary></indexterm><indexterm><primary>Methods</primary><secondary>value</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>JSONWriter</type>
          <methodname>value</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Append an object value.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>object</para></entry>
                <entry><para> The object to append. It can be null, or a Boolean, Number, String, JSONObject, or JSONArray, or an object that implements JSONString.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> this</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the value is out of sequence.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.XML" id="class-org.json.XML">
      <title>Class XML</title>
      <indexterm><primary>XML</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>XML</secondary></indexterm>
      <para>This provides static methods to convert an XML text into a JSONObject, and to covert a JSONObject into an XML text.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>XML</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>AMP</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>APOS</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>BANG</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>EQ</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>GT</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>LT</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>QUEST</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>QUOT</varname>
          </fieldsynopsis>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>Character</type>
            <varname>SLASH</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>XML</methodname>
            <void/>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Static Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>escape</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>void</type>
            <methodname>noSpace</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>Object</type>
            <methodname>stringToValue</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>JSONObject</type>
            <methodname>toJSONObject</methodname>
            <methodparam><type>String</type><parameter>string</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <type>String</type>
            <methodname>toString</methodname>
            <methodparam><type>Object</type><parameter>object</parameter></methodparam>
            <methodparam><type>String</type><parameter>tagName</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/XML/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/XML/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="AMP" id="field-org.json.XML.AMP">
        <title>AMP</title>
        <indexterm><primary>AMP</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>AMP</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>AMP</varname>
        </fieldsynopsis>
        <para>The Character '&amp;'.</para>
      </sect2>
      <sect2 xreflabel="APOS" id="field-org.json.XML.APOS">
        <title>APOS</title>
        <indexterm><primary>APOS</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>APOS</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>APOS</varname>
        </fieldsynopsis>
        <para>The Character '''.</para>
      </sect2>
      <sect2 xreflabel="BANG" id="field-org.json.XML.BANG">
        <title>BANG</title>
        <indexterm><primary>BANG</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>BANG</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>BANG</varname>
        </fieldsynopsis>
        <para>The Character '!'.</para>
      </sect2>
      <sect2 xreflabel="EQ" id="field-org.json.XML.EQ">
        <title>EQ</title>
        <indexterm><primary>EQ</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>EQ</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>EQ</varname>
        </fieldsynopsis>
        <para>The Character '='.</para>
      </sect2>
      <sect2 xreflabel="GT" id="field-org.json.XML.GT">
        <title>GT</title>
        <indexterm><primary>GT</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>GT</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>GT</varname>
        </fieldsynopsis>
        <para>The Character '&gt;'.</para>
      </sect2>
      <sect2 xreflabel="LT" id="field-org.json.XML.LT">
        <title>LT</title>
        <indexterm><primary>LT</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>LT</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>LT</varname>
        </fieldsynopsis>
        <para>The Character '&lt;'.</para>
      </sect2>
      <sect2 xreflabel="QUEST" id="field-org.json.XML.QUEST">
        <title>QUEST</title>
        <indexterm><primary>QUEST</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>QUEST</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>QUEST</varname>
        </fieldsynopsis>
        <para>The Character '?'.</para>
      </sect2>
      <sect2 xreflabel="QUOT" id="field-org.json.XML.QUOT">
        <title>QUOT</title>
        <indexterm><primary>QUOT</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>QUOT</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>QUOT</varname>
        </fieldsynopsis>
        <para>The Character '"'.</para>
      </sect2>
      <sect2 xreflabel="SLASH" id="field-org.json.XML.SLASH">
        <title>SLASH</title>
        <indexterm><primary>SLASH</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>SLASH</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>Character</type>
          <varname>SLASH</varname>
        </fieldsynopsis>
        <para>The Character '/'.</para>
      </sect2>
      <sect2 xreflabel="escape(java.lang.String)" id="method-org.json.XML.escape-java.lang.String">
        <title>escape(String)<indexterm><primary>escape</primary></indexterm><indexterm><primary>Methods</primary><secondary>escape</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>escape</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <para>Replace special characters with XML escapes: </para>
        <screen>
 &amp; (ampersand) is replaced by &amp;amp;
 &lt; (less than) is replaced by &amp;lt;
 &gt; (greater than) is replaced by &amp;gt;
 " (double quote) is replaced by &amp;quot;
 </screen>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The string to be escaped.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The escaped string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="noSpace(java.lang.String)" id="method-org.json.XML.noSpace-java.lang.String">
        <title>noSpace(String)<indexterm><primary>noSpace</primary></indexterm><indexterm><primary>Methods</primary><secondary>noSpace</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>void</type>
          <methodname>noSpace</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Throw an exception if the string contains whitespace. Whitespace is not allowed in tagNames and attributes.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para/></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="stringToValue(java.lang.String)" id="method-org.json.XML.stringToValue-java.lang.String">
        <title>stringToValue(String)<indexterm><primary>stringToValue</primary></indexterm><indexterm><primary>Methods</primary><secondary>stringToValue</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>Object</type>
          <methodname>stringToValue</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
        </methodsynopsis>
        <para>Try to convert a string into a number, boolean, or null. If the string can't be converted, return the string. This is much less ambitious than JSONObject.stringToValue, especially because it does not attempt to convert plus forms, octal forms, hex forms, or E forms lacking decimal points.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> A String.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A simple JSON value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="toJSONObject(java.lang.String)" id="method-org.json.XML.toJSONObject-java.lang.String">
        <title>toJSONObject(String)<indexterm><primary>toJSONObject</primary></indexterm><indexterm><primary>Methods</primary><secondary>toJSONObject</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>JSONObject</type>
          <methodname>toJSONObject</methodname>
          <methodparam><type>String</type><parameter>string</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a well-formed (but not necessarily valid) XML string into a JSONObject. Some information may be lost in this transformation because JSON is a data format and XML is a document format. XML uses elements, attributes, and content text, while JSON uses unordered collections of name/value pairs and arrays of values. JSON does not does not like to distinguish between elements and attributes. Sequences of similar elements are represented as JSONArrays. Content text may be placed in a "content" member. Comments, prologs, DTDs, and <literal>&lt;[ [ ]]&gt;</literal> are ignored.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>string</para></entry>
                <entry><para> The source string.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A JSONObject containing the structured data from the XML string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(java.lang.Object)" id="method-org.json.XML.toString-java.lang.Object">
        <title>toString(Object)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a JSONObject into a well-formed, element-normal XML string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>object</para></entry>
                <entry><para> A JSONObject.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="toString(java.lang.Object, java.lang.String)" id="method-org.json.XML.toString-java.lang.Object-java.lang.String">
        <title>toString(Object, String)<indexterm><primary>toString</primary></indexterm><indexterm><primary>Methods</primary><secondary>toString</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <type>String</type>
          <methodname>toString</methodname>
          <methodparam><type>Object</type><parameter>object</parameter></methodparam>
          <methodparam><type>String</type><parameter>tagName</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Convert a JSONObject into a well-formed, element-normal XML string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>object</para></entry>
                <entry><para> A JSONObject.</para></entry>
              </row>
              <row>
                <entry><para>tagName</para></entry>
                <entry><para> The optional name of the enclosing tag.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
    <sect1 xreflabel="org.json.XMLTokener" id="class-org.json.XMLTokener">
      <title>Class XMLTokener</title>
      <indexterm><primary>XMLTokener</primary></indexterm>
      <indexterm><primary>Classes</primary><secondary>XMLTokener</secondary></indexterm>
      <para>The XMLTokener extends the JSONTokener to provide additional methods for the parsing of XML texts.</para>
      <sect2>
        <title>Synopsis</title>
        <classsynopsis class="class" language="java">
          <ooclass>
            <modifier>public</modifier>
            <modifier>class</modifier>
            <classname>XMLTokener</classname>
          </ooclass>
          <ooclass>
            <classname>JSONTokener</classname>
          </ooclass>
          <classsynopsisinfo role="comment">// Public Static Fields</classsynopsisinfo>
          <fieldsynopsis language="java">
            <modifier>public</modifier>
            <modifier>static</modifier>
            <modifier>final</modifier>
            <type>HashMap</type>
            <varname>entity</varname>
          </fieldsynopsis>
          <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
          <constructorsynopsis language="java">
            <modifier>public</modifier>
            <methodname>XMLTokener</methodname>
            <methodparam><type>String</type><parameter>s</parameter></methodparam>
          </constructorsynopsis>
          <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>String</type>
            <methodname>nextCDATA</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>nextContent</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>nextEntity</methodname>
            <methodparam><type>char</type><parameter>ampersand</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>nextMeta</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>Object</type>
            <methodname>nextToken</methodname>
            <void/>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
          <methodsynopsis language="java">
            <modifier>public</modifier>
            <type>boolean</type>
            <methodname>skipPast</methodname>
            <methodparam><type>String</type><parameter>to</parameter></methodparam>
            <exceptionname>JSONException</exceptionname>
          </methodsynopsis>
        </classsynopsis>
        <variablelist>
          <varlistentry>
            <term><emphasis>Author</emphasis></term>
            <listitem>
              <para><simplelist type="inline"><member>JSON.org</member></simplelist></para>
            </listitem>
          </varlistentry>
        </variablelist>
        <informalfigure>
          <mediaobject>
            <imageobject role="html">
              <imagedata align="center" fileref="figures/org/json/XMLTokener/ClassDiagram.png" scalefit="1"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata align="center" contentdepth="100%" contentwidth="" depth="" fileref="figures/org/json/XMLTokener/ClassDiagram.png" scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </sect2>
      <sect2 xreflabel="XMLTokener(java.lang.String)" id="constructor-org.json.XMLTokener-java.lang.String">
        <title>XMLTokener(String)<indexterm><primary>XMLTokener</primary></indexterm><indexterm><primary>Methods</primary><secondary>XMLTokener</secondary></indexterm></title>
        <constructorsynopsis language="java">
          <modifier>public</modifier>
          <methodname>XMLTokener</methodname>
          <methodparam><type>String</type><parameter>s</parameter></methodparam>
        </constructorsynopsis>
        <para>Construct an XMLTokener from a string.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>s</para></entry>
                <entry><para> A source string.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect2>
      <sect2 xreflabel="entity" id="field-org.json.XMLTokener.entity">
        <title>entity</title>
        <indexterm><primary>entity</primary></indexterm>
        <indexterm><primary>Fields</primary><secondary>entity</secondary></indexterm>
        <fieldsynopsis language="java">
          <modifier>public</modifier>
          <modifier>static</modifier>
          <modifier>final</modifier>
          <type>HashMap</type>
          <varname>entity</varname>
        </fieldsynopsis>
        <para>The table of entity values. It initially contains Character values for amp, apos, gt, lt, quot.</para>
      </sect2>
      <sect2 xreflabel="nextCDATA()" id="method-org.json.XMLTokener.nextCDATA">
        <title>nextCDATA()<indexterm><primary>nextCDATA</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextCDATA</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>String</type>
          <methodname>nextCDATA</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the text in the CDATA block.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> The string up to the <literal>]]&gt;</literal>.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the <literal>]]&gt;</literal> is not found.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextContent()" id="method-org.json.XMLTokener.nextContent">
        <title>nextContent()<indexterm><primary>nextContent</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextContent</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>nextContent</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next XML outer token, trimming whitespace. There are two kinds of tokens: the '&lt;' character which begins a markup tag, and the content text between markup tags.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A string, or a '&lt;' Character, or null if there is no more source text.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextEntity(char)" id="method-org.json.XMLTokener.nextEntity-char">
        <title>nextEntity(char)<indexterm><primary>nextEntity</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextEntity</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>nextEntity</methodname>
          <methodparam><type>char</type><parameter>ampersand</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Return the next entity. These entities are translated to Characters: <literal>&amp; ' &gt; &lt; "</literal>.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>ampersand</para></entry>
                <entry><para> An ampersand character.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> A Character or an entity String if the entity is not recognized.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If missing ';' in XML entity.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextMeta()" id="method-org.json.XMLTokener.nextMeta">
        <title>nextMeta()<indexterm><primary>nextMeta</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextMeta</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>nextMeta</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Returns the next XML meta token. This is used for skipping over &lt;!...&gt; and &lt;?...?&gt; structures.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> Syntax characters (<literal>&lt; &gt; / = ! ?</literal>) are returned as Character, and strings and names are returned as Boolean. We don't care what the values actually are.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If a string is not properly closed or if the XML is badly structured.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="nextToken()" id="method-org.json.XMLTokener.nextToken">
        <title>nextToken()<indexterm><primary>nextToken</primary></indexterm><indexterm><primary>Methods</primary><secondary>nextToken</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>Object</type>
          <methodname>nextToken</methodname>
          <void/>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Get the next XML Token. These tokens are found inside of angle brackets. It may be one of these characters: <literal>/ &gt; = ! ?</literal> or it may be a string wrapped in single quotes or double quotes, or it may be a name.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para><emphasis>return</emphasis></para></entry>
                <entry><para> a String or a Character.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>If the XML is not well formed.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
      <sect2 xreflabel="skipPast(java.lang.String)" id="method-org.json.XMLTokener.skipPast-java.lang.String">
        <title>skipPast(String)<indexterm><primary>skipPast</primary></indexterm><indexterm><primary>Methods</primary><secondary>skipPast</secondary></indexterm></title>
        <methodsynopsis language="java">
          <modifier>public</modifier>
          <type>boolean</type>
          <methodname>skipPast</methodname>
          <methodparam><type>String</type><parameter>to</parameter></methodparam>
          <exceptionname>JSONException</exceptionname>
        </methodsynopsis>
        <para>Skip characters until past the requested string. If it is not found, we are left at the end of the source with a result of false.</para>
        <informaltable frame="all" role="parameter">
          <?dbfo table-width="98%"?>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="3*"/>
            <tbody>
              <row>
                <entry align="left" nameend="c2" namest="c1"><para>Parameters</para>                  <?dbfo bgcolor="#eeeeee"?>
</entry>
              </row>
              <row>
                <entry><para>to</para></entry>
                <entry><para> A string to skip past.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <?dbfo list-presentation="blocks"?>
          <title>Exceptions</title>
          <varlistentry>
            <term><exceptionname>JSONException</exceptionname></term>
            <listitem>
              <para>The JSONException is thrown by the JSON.org classes when things are amiss.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>
  </chapter>
  <appendix>
    <title>Statistics</title>
    <section>
      <title>Totals</title>
      <mediaobject>
        <imageobject>
          <imagedata depth="300px" fileref="./figures/statistics/Totals.png" width="500px"/>
        </imageobject>
      </mediaobject>
      <informaltable frame="all" role="parameter">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="4*"/>
          <colspec colname="c2" colwidth="1*"/>
          <tbody>
            <row>
              <entry align="left" nameend="c2" namest="c1"><para>Totals</para>                <?dbfo bgcolor="#eeeeee"?>
</entry>
            </row>
            <row>
              <entry><para>Totals Packages</para></entry>
              <entry><para>7</para></entry>
            </row>
            <row>
              <entry><para>Totals Classes</para></entry>
              <entry><para>30</para></entry>
            </row>
            <row>
              <entry><para>Totals Fields</para></entry>
              <entry><para>68</para></entry>
            </row>
            <row>
              <entry><para>Totals Methods</para></entry>
              <entry><para>238</para></entry>
            </row>
            <row>
              <entry><para>Public Classes</para></entry>
              <entry><para>30</para></entry>
            </row>
            <row>
              <entry><para>Public Fields</para></entry>
              <entry><para>29</para></entry>
            </row>
            <row>
              <entry><para>Public Methods</para></entry>
              <entry><para>210</para></entry>
            </row>
            <row>
              <entry><para>Protected Fields</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>Protected Methods</para></entry>
              <entry><para>0</para></entry>
            </row>
            <row>
              <entry><para>Package Classes</para></entry>
              <entry><para>0</para></entry>
            </row>
            <row>
              <entry><para>Package Fields</para></entry>
              <entry><para>0</para></entry>
            </row>
            <row>
              <entry><para>Package Methods</para></entry>
              <entry><para>3</para></entry>
            </row>
            <row>
              <entry><para>Private Fields</para></entry>
              <entry><para>37</para></entry>
            </row>
            <row>
              <entry><para>Private Methods</para></entry>
              <entry><para>25</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Classes per package</title>
      <mediaobject>
        <imageobject>
          <imagedata depth="300px" fileref="./figures/statistics/ClassesPerPackage.png" width="500px"/>
        </imageobject>
      </mediaobject>
      <informaltable frame="all" role="parameter">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="4*"/>
          <colspec colname="c2" colwidth="1*"/>
          <tbody>
            <row>
              <entry align="left" nameend="c2" namest="c1"><para>Classes per package</para>                <?dbfo bgcolor="#eeeeee"?>
</entry>
            </row>
            <row>
              <entry><para>org.json</para></entry>
              <entry><para>15</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.clients</para></entry>
              <entry><para>3</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.examples</para></entry>
              <entry><para>3</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.extensions</para></entry>
              <entry><para>3</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.forms</para></entry>
              <entry><para>3</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.protocols.json</para></entry>
              <entry><para>1</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Top Ten - Direct known subclasses</title>
      <mediaobject>
        <imageobject>
          <imagedata depth="500px" fileref="./figures/statistics/DirectKnownSubclasses.png" width="500px"/>
        </imageobject>
      </mediaobject>
      <informaltable frame="all" role="parameter">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="4*"/>
          <colspec colname="c2" colwidth="1*"/>
          <tbody>
            <row>
              <entry align="left" nameend="c2" namest="c1"><para>Direct known subclasses</para>                <?dbfo bgcolor="#eeeeee"?>
</entry>
            </row>
            <row>
              <entry><para>net.smartsocket.clients.AbstractClient</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.extensions.AbstractExtension</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>net.smartsocket.extensions.TCPExtension</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>org.json.JSONTokener</para></entry>
              <entry><para>2</para></entry>
            </row>
            <row>
              <entry><para>org.json.JSONArray</para></entry>
              <entry><para>1</para></entry>
            </row>
            <row>
              <entry><para>org.json.JSONWriter</para></entry>
              <entry><para>1</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </appendix>
  <index/>
</book>